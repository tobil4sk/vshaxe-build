// Generated by Haxe 3.4.1 (git build development @ bd68468)
if (typeof process !== "undefined") if (process.version < "v4.0.0") console.warn("Module " + (typeof(module) == "undefined" ? "" : module.filename) + " requires node.js version 4.0.0 or higher");

(function ($global) { "use strict";
var $estr = function() { return js.Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js._Boot.HaxeError("EReg::matched");
		}
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var JsonParser_Ano_afterBuildCommands_args_beforeBuildCommands_composite_debug_display_inherit_installCommands_isBuildCommand_isTestCommand_name___Inst_StringtargetDependencies_ = function(warnings,putils) {
	this.warnings = warnings == null ? [] : warnings;
	this.putils = putils;
};
JsonParser_Ano_afterBuildCommands_args_beforeBuildCommands_composite_debug_display_inherit_installCommands_isBuildCommand_isTestCommand_name___Inst_StringtargetDependencies_.__name__ = true;
JsonParser_Ano_afterBuildCommands_args_beforeBuildCommands_composite_debug_display_inherit_installCommands_isBuildCommand_isTestCommand_name___Inst_StringtargetDependencies_.prototype = {
	loadJson: function(fields,objectPos) {
		var assigned = new haxe.ds.StringMap();
		if(__map_reserved["afterBuildCommands"] != null) {
			assigned.setReserved("afterBuildCommands",true);
		} else {
			assigned.h["afterBuildCommands"] = true;
		}
		if(__map_reserved["args"] != null) {
			assigned.setReserved("args",true);
		} else {
			assigned.h["args"] = true;
		}
		if(__map_reserved["beforeBuildCommands"] != null) {
			assigned.setReserved("beforeBuildCommands",true);
		} else {
			assigned.h["beforeBuildCommands"] = true;
		}
		if(__map_reserved["composite"] != null) {
			assigned.setReserved("composite",true);
		} else {
			assigned.h["composite"] = true;
		}
		if(__map_reserved["debug"] != null) {
			assigned.setReserved("debug",true);
		} else {
			assigned.h["debug"] = true;
		}
		if(__map_reserved["display"] != null) {
			assigned.setReserved("display",true);
		} else {
			assigned.h["display"] = true;
		}
		if(__map_reserved["inherit"] != null) {
			assigned.setReserved("inherit",true);
		} else {
			assigned.h["inherit"] = true;
		}
		if(__map_reserved["installCommands"] != null) {
			assigned.setReserved("installCommands",true);
		} else {
			assigned.h["installCommands"] = true;
		}
		if(__map_reserved["isBuildCommand"] != null) {
			assigned.setReserved("isBuildCommand",true);
		} else {
			assigned.h["isBuildCommand"] = true;
		}
		if(__map_reserved["isTestCommand"] != null) {
			assigned.setReserved("isTestCommand",true);
		} else {
			assigned.h["isTestCommand"] = true;
		}
		if(__map_reserved["name"] != null) {
			assigned.setReserved("name",false);
		} else {
			assigned.h["name"] = false;
		}
		if(__map_reserved["targetDependencies"] != null) {
			assigned.setReserved("targetDependencies",true);
		} else {
			assigned.h["targetDependencies"] = true;
		}
		this.object = { afterBuildCommands : null, args : null, beforeBuildCommands : null, composite : null, debug : null, display : null, inherit : null, installCommands : null, isBuildCommand : null, isTestCommand : null, name : null, targetDependencies : null};
		var _g = 0;
		while(_g < fields.length) {
			var field = fields[_g];
			++_g;
			var _g1 = field.name;
			switch(_g1) {
			case "afterBuildCommands":
				var _g11 = field.value.value;
				switch(_g11[1]) {
				case 3:
					var s0 = _g11[2];
					var _g12 = [];
					var _g2 = 0;
					while(_g2 < s0.length) {
						var content1 = s0[_g2];
						++_g2;
						var _g3 = content1.value;
						var tmp;
						switch(_g3[1]) {
						case 3:
							var s1 = _g3[2];
							var _g31 = [];
							var _g4 = 0;
							while(_g4 < s1.length) {
								var content2 = s1[_g4];
								++_g4;
								var _g5 = content2.value;
								var tmp1;
								switch(_g5[1]) {
								case 0:
									var s2 = _g5[2];
									tmp1 = s2;
									break;
								case 5:
									tmp1 = null;
									break;
								default:
									this.warnings.push(json2object.Error.IncorrectType(field.name,"String",this.putils.convertPosition(content2.pos)));
									continue;
								}
								_g31.push(tmp1);
							}
							tmp = _g31;
							break;
						case 5:
							tmp = null;
							break;
						default:
							this.warnings.push(json2object.Error.IncorrectType(field.name,"Array",this.putils.convertPosition(content1.pos)));
							continue;
						}
						_g12.push(tmp);
					}
					this.object.afterBuildCommands = _g12;
					var key = field.name;
					if(__map_reserved[key] != null) {
						assigned.setReserved(key,true);
					} else {
						assigned.h[key] = true;
					}
					break;
				case 5:
					this.object.afterBuildCommands = null;
					var key1 = field.name;
					if(__map_reserved[key1] != null) {
						assigned.setReserved(key1,true);
					} else {
						assigned.h[key1] = true;
					}
					break;
				default:
					this.warnings.push(json2object.Error.IncorrectType(field.name,"Array",this.putils.convertPosition(field.value.pos)));
				}
				break;
			case "args":
				var _g13 = field.value.value;
				switch(_g13[1]) {
				case 2:
					var s01 = _g13[2];
					this.object.args = new JsonParser_Ano_classPaths_deadCodeElimination_debug_defines_haxelibs_macros_main_noInline_output_packageName_workingDirectory_(this.warnings,this.putils).loadJson(s01,field.value.pos);
					var key2 = field.name;
					if(__map_reserved[key2] != null) {
						assigned.setReserved(key2,true);
					} else {
						assigned.h[key2] = true;
					}
					break;
				case 5:
					this.object.args = null;
					var key3 = field.name;
					if(__map_reserved[key3] != null) {
						assigned.setReserved(key3,true);
					} else {
						assigned.h[key3] = true;
					}
					break;
				default:
					this.warnings.push(json2object.Error.IncorrectType(field.name,"Anonymous",this.putils.convertPosition(field.value.pos)));
				}
				break;
			case "beforeBuildCommands":
				var _g14 = field.value.value;
				switch(_g14[1]) {
				case 3:
					var s02 = _g14[2];
					var _g15 = [];
					var _g21 = 0;
					while(_g21 < s02.length) {
						var content11 = s02[_g21];
						++_g21;
						var _g32 = content11.value;
						var tmp2;
						switch(_g32[1]) {
						case 3:
							var s11 = _g32[2];
							var _g33 = [];
							var _g41 = 0;
							while(_g41 < s11.length) {
								var content21 = s11[_g41];
								++_g41;
								var _g51 = content21.value;
								var tmp3;
								switch(_g51[1]) {
								case 0:
									var s21 = _g51[2];
									tmp3 = s21;
									break;
								case 5:
									tmp3 = null;
									break;
								default:
									this.warnings.push(json2object.Error.IncorrectType(field.name,"String",this.putils.convertPosition(content21.pos)));
									continue;
								}
								_g33.push(tmp3);
							}
							tmp2 = _g33;
							break;
						case 5:
							tmp2 = null;
							break;
						default:
							this.warnings.push(json2object.Error.IncorrectType(field.name,"Array",this.putils.convertPosition(content11.pos)));
							continue;
						}
						_g15.push(tmp2);
					}
					this.object.beforeBuildCommands = _g15;
					var key4 = field.name;
					if(__map_reserved[key4] != null) {
						assigned.setReserved(key4,true);
					} else {
						assigned.h[key4] = true;
					}
					break;
				case 5:
					this.object.beforeBuildCommands = null;
					var key5 = field.name;
					if(__map_reserved[key5] != null) {
						assigned.setReserved(key5,true);
					} else {
						assigned.h[key5] = true;
					}
					break;
				default:
					this.warnings.push(json2object.Error.IncorrectType(field.name,"Array",this.putils.convertPosition(field.value.pos)));
				}
				break;
			case "composite":
				var _g16 = field.value.value;
				switch(_g16[1]) {
				case 4:
					var s03 = _g16[2];
					this.object.composite = s03;
					var key6 = field.name;
					if(__map_reserved[key6] != null) {
						assigned.setReserved(key6,true);
					} else {
						assigned.h[key6] = true;
					}
					break;
				case 5:
					this.warnings.push(json2object.Error.IncorrectType(field.name,"Bool",this.putils.convertPosition(field.value.pos)));
					break;
				default:
					this.warnings.push(json2object.Error.IncorrectType(field.name,"Bool",this.putils.convertPosition(field.value.pos)));
				}
				break;
			case "debug":
				var _g17 = field.value.value;
				switch(_g17[1]) {
				case 2:
					var s04 = _g17[2];
					this.object.debug = new JsonParser_Ano_afterBuildCommands_args_beforeBuildCommands_installCommands_targetDependencies_(this.warnings,this.putils).loadJson(s04,field.value.pos);
					var key7 = field.name;
					if(__map_reserved[key7] != null) {
						assigned.setReserved(key7,true);
					} else {
						assigned.h[key7] = true;
					}
					break;
				case 5:
					this.object.debug = null;
					var key8 = field.name;
					if(__map_reserved[key8] != null) {
						assigned.setReserved(key8,true);
					} else {
						assigned.h[key8] = true;
					}
					break;
				default:
					this.warnings.push(json2object.Error.IncorrectType(field.name,"Anonymous",this.putils.convertPosition(field.value.pos)));
				}
				break;
			case "display":
				var _g18 = field.value.value;
				switch(_g18[1]) {
				case 2:
					var s05 = _g18[2];
					this.object.display = new JsonParser_Ano_afterBuildCommands_args_beforeBuildCommands_installCommands_targetDependencies_(this.warnings,this.putils).loadJson(s05,field.value.pos);
					var key9 = field.name;
					if(__map_reserved[key9] != null) {
						assigned.setReserved(key9,true);
					} else {
						assigned.h[key9] = true;
					}
					break;
				case 5:
					this.object.display = null;
					var key10 = field.name;
					if(__map_reserved[key10] != null) {
						assigned.setReserved(key10,true);
					} else {
						assigned.h[key10] = true;
					}
					break;
				default:
					this.warnings.push(json2object.Error.IncorrectType(field.name,"Anonymous",this.putils.convertPosition(field.value.pos)));
				}
				break;
			case "inherit":
				var _g19 = field.value.value;
				switch(_g19[1]) {
				case 0:
					var s06 = _g19[2];
					this.object.inherit = s06;
					var key11 = field.name;
					if(__map_reserved[key11] != null) {
						assigned.setReserved(key11,true);
					} else {
						assigned.h[key11] = true;
					}
					break;
				case 5:
					this.object.inherit = null;
					var key12 = field.name;
					if(__map_reserved[key12] != null) {
						assigned.setReserved(key12,true);
					} else {
						assigned.h[key12] = true;
					}
					break;
				default:
					this.warnings.push(json2object.Error.IncorrectType(field.name,"String",this.putils.convertPosition(field.value.pos)));
				}
				break;
			case "installCommands":
				var _g110 = field.value.value;
				switch(_g110[1]) {
				case 3:
					var s07 = _g110[2];
					var _g111 = [];
					var _g22 = 0;
					while(_g22 < s07.length) {
						var content12 = s07[_g22];
						++_g22;
						var _g34 = content12.value;
						var tmp4;
						switch(_g34[1]) {
						case 3:
							var s12 = _g34[2];
							var _g35 = [];
							var _g42 = 0;
							while(_g42 < s12.length) {
								var content22 = s12[_g42];
								++_g42;
								var _g52 = content22.value;
								var tmp5;
								switch(_g52[1]) {
								case 0:
									var s22 = _g52[2];
									tmp5 = s22;
									break;
								case 5:
									tmp5 = null;
									break;
								default:
									this.warnings.push(json2object.Error.IncorrectType(field.name,"String",this.putils.convertPosition(content22.pos)));
									continue;
								}
								_g35.push(tmp5);
							}
							tmp4 = _g35;
							break;
						case 5:
							tmp4 = null;
							break;
						default:
							this.warnings.push(json2object.Error.IncorrectType(field.name,"Array",this.putils.convertPosition(content12.pos)));
							continue;
						}
						_g111.push(tmp4);
					}
					this.object.installCommands = _g111;
					var key13 = field.name;
					if(__map_reserved[key13] != null) {
						assigned.setReserved(key13,true);
					} else {
						assigned.h[key13] = true;
					}
					break;
				case 5:
					this.object.installCommands = null;
					var key14 = field.name;
					if(__map_reserved[key14] != null) {
						assigned.setReserved(key14,true);
					} else {
						assigned.h[key14] = true;
					}
					break;
				default:
					this.warnings.push(json2object.Error.IncorrectType(field.name,"Array",this.putils.convertPosition(field.value.pos)));
				}
				break;
			case "isBuildCommand":
				var _g112 = field.value.value;
				switch(_g112[1]) {
				case 4:
					var s08 = _g112[2];
					this.object.isBuildCommand = s08;
					var key15 = field.name;
					if(__map_reserved[key15] != null) {
						assigned.setReserved(key15,true);
					} else {
						assigned.h[key15] = true;
					}
					break;
				case 5:
					this.warnings.push(json2object.Error.IncorrectType(field.name,"Bool",this.putils.convertPosition(field.value.pos)));
					break;
				default:
					this.warnings.push(json2object.Error.IncorrectType(field.name,"Bool",this.putils.convertPosition(field.value.pos)));
				}
				break;
			case "isTestCommand":
				var _g113 = field.value.value;
				switch(_g113[1]) {
				case 4:
					var s09 = _g113[2];
					this.object.isTestCommand = s09;
					var key16 = field.name;
					if(__map_reserved[key16] != null) {
						assigned.setReserved(key16,true);
					} else {
						assigned.h[key16] = true;
					}
					break;
				case 5:
					this.warnings.push(json2object.Error.IncorrectType(field.name,"Bool",this.putils.convertPosition(field.value.pos)));
					break;
				default:
					this.warnings.push(json2object.Error.IncorrectType(field.name,"Bool",this.putils.convertPosition(field.value.pos)));
				}
				break;
			case "name":
				var _g114 = field.value.value;
				switch(_g114[1]) {
				case 0:
					var s010 = _g114[2];
					this.object.name = s010;
					var key17 = field.name;
					if(__map_reserved[key17] != null) {
						assigned.setReserved(key17,true);
					} else {
						assigned.h[key17] = true;
					}
					break;
				case 5:
					this.object.name = null;
					var key18 = field.name;
					if(__map_reserved[key18] != null) {
						assigned.setReserved(key18,true);
					} else {
						assigned.h[key18] = true;
					}
					break;
				default:
					this.warnings.push(json2object.Error.IncorrectType(field.name,"String",this.putils.convertPosition(field.value.pos)));
				}
				break;
			case "targetDependencies":
				var _g115 = field.value.value;
				switch(_g115[1]) {
				case 3:
					var s011 = _g115[2];
					var _g116 = [];
					var _g23 = 0;
					while(_g23 < s011.length) {
						var content13 = s011[_g23];
						++_g23;
						var _g36 = content13.value;
						var tmp6;
						switch(_g36[1]) {
						case 0:
							var s13 = _g36[2];
							tmp6 = s13;
							break;
						case 5:
							tmp6 = null;
							break;
						default:
							this.warnings.push(json2object.Error.IncorrectType(field.name,"String",this.putils.convertPosition(content13.pos)));
							continue;
						}
						_g116.push(tmp6);
					}
					this.object.targetDependencies = _g116;
					var key19 = field.name;
					if(__map_reserved[key19] != null) {
						assigned.setReserved(key19,true);
					} else {
						assigned.h[key19] = true;
					}
					break;
				case 5:
					this.object.targetDependencies = null;
					var key20 = field.name;
					if(__map_reserved[key20] != null) {
						assigned.setReserved(key20,true);
					} else {
						assigned.h[key20] = true;
					}
					break;
				default:
					this.warnings.push(json2object.Error.IncorrectType(field.name,"Array",this.putils.convertPosition(field.value.pos)));
				}
				break;
			default:
				this.warnings.push(json2object.Error.UnknownVariable(field.name,this.putils.convertPosition(field.value.pos)));
			}
		}
		var lastPos = this.putils.convertPosition(new hxjsonast.Position(objectPos.file,objectPos.max - 1,objectPos.max));
		var s = assigned.keys();
		while(s.hasNext()) {
			var s3 = s.next();
			if(!(__map_reserved[s3] != null ? assigned.getReserved(s3) : assigned.h[s3])) {
				this.warnings.push(json2object.Error.UninitializedVariable(s3,lastPos));
			}
		}
		return this.object;
	}
	,__class__: JsonParser_Ano_afterBuildCommands_args_beforeBuildCommands_composite_debug_display_inherit_installCommands_isBuildCommand_isTestCommand_name___Inst_StringtargetDependencies_
};
var JsonParser_Ano_afterBuildCommands_args_beforeBuildCommands_installCommands_targetDependencies_ = function(warnings,putils) {
	this.warnings = warnings == null ? [] : warnings;
	this.putils = putils;
};
JsonParser_Ano_afterBuildCommands_args_beforeBuildCommands_installCommands_targetDependencies_.__name__ = true;
JsonParser_Ano_afterBuildCommands_args_beforeBuildCommands_installCommands_targetDependencies_.prototype = {
	loadJson: function(fields,objectPos) {
		var assigned = new haxe.ds.StringMap();
		if(__map_reserved["afterBuildCommands"] != null) {
			assigned.setReserved("afterBuildCommands",true);
		} else {
			assigned.h["afterBuildCommands"] = true;
		}
		if(__map_reserved["args"] != null) {
			assigned.setReserved("args",true);
		} else {
			assigned.h["args"] = true;
		}
		if(__map_reserved["beforeBuildCommands"] != null) {
			assigned.setReserved("beforeBuildCommands",true);
		} else {
			assigned.h["beforeBuildCommands"] = true;
		}
		if(__map_reserved["installCommands"] != null) {
			assigned.setReserved("installCommands",true);
		} else {
			assigned.h["installCommands"] = true;
		}
		if(__map_reserved["targetDependencies"] != null) {
			assigned.setReserved("targetDependencies",true);
		} else {
			assigned.h["targetDependencies"] = true;
		}
		this.object = { afterBuildCommands : null, args : null, beforeBuildCommands : null, installCommands : null, targetDependencies : null};
		var _g = 0;
		while(_g < fields.length) {
			var field = fields[_g];
			++_g;
			var _g1 = field.name;
			switch(_g1) {
			case "afterBuildCommands":
				var _g11 = field.value.value;
				switch(_g11[1]) {
				case 3:
					var s0 = _g11[2];
					var _g12 = [];
					var _g2 = 0;
					while(_g2 < s0.length) {
						var content1 = s0[_g2];
						++_g2;
						var _g3 = content1.value;
						var tmp;
						switch(_g3[1]) {
						case 3:
							var s1 = _g3[2];
							var _g31 = [];
							var _g4 = 0;
							while(_g4 < s1.length) {
								var content2 = s1[_g4];
								++_g4;
								var _g5 = content2.value;
								var tmp1;
								switch(_g5[1]) {
								case 0:
									var s2 = _g5[2];
									tmp1 = s2;
									break;
								case 5:
									tmp1 = null;
									break;
								default:
									this.warnings.push(json2object.Error.IncorrectType(field.name,"String",this.putils.convertPosition(content2.pos)));
									continue;
								}
								_g31.push(tmp1);
							}
							tmp = _g31;
							break;
						case 5:
							tmp = null;
							break;
						default:
							this.warnings.push(json2object.Error.IncorrectType(field.name,"Array",this.putils.convertPosition(content1.pos)));
							continue;
						}
						_g12.push(tmp);
					}
					this.object.afterBuildCommands = _g12;
					var key = field.name;
					if(__map_reserved[key] != null) {
						assigned.setReserved(key,true);
					} else {
						assigned.h[key] = true;
					}
					break;
				case 5:
					this.object.afterBuildCommands = null;
					var key1 = field.name;
					if(__map_reserved[key1] != null) {
						assigned.setReserved(key1,true);
					} else {
						assigned.h[key1] = true;
					}
					break;
				default:
					this.warnings.push(json2object.Error.IncorrectType(field.name,"Array",this.putils.convertPosition(field.value.pos)));
				}
				break;
			case "args":
				var _g13 = field.value.value;
				switch(_g13[1]) {
				case 2:
					var s01 = _g13[2];
					this.object.args = new JsonParser_Ano_classPaths_deadCodeElimination_debug_defines_haxelibs_macros_main_noInline_output_packageName_workingDirectory_(this.warnings,this.putils).loadJson(s01,field.value.pos);
					var key2 = field.name;
					if(__map_reserved[key2] != null) {
						assigned.setReserved(key2,true);
					} else {
						assigned.h[key2] = true;
					}
					break;
				case 5:
					this.object.args = null;
					var key3 = field.name;
					if(__map_reserved[key3] != null) {
						assigned.setReserved(key3,true);
					} else {
						assigned.h[key3] = true;
					}
					break;
				default:
					this.warnings.push(json2object.Error.IncorrectType(field.name,"Anonymous",this.putils.convertPosition(field.value.pos)));
				}
				break;
			case "beforeBuildCommands":
				var _g14 = field.value.value;
				switch(_g14[1]) {
				case 3:
					var s02 = _g14[2];
					var _g15 = [];
					var _g21 = 0;
					while(_g21 < s02.length) {
						var content11 = s02[_g21];
						++_g21;
						var _g32 = content11.value;
						var tmp2;
						switch(_g32[1]) {
						case 3:
							var s11 = _g32[2];
							var _g33 = [];
							var _g41 = 0;
							while(_g41 < s11.length) {
								var content21 = s11[_g41];
								++_g41;
								var _g51 = content21.value;
								var tmp3;
								switch(_g51[1]) {
								case 0:
									var s21 = _g51[2];
									tmp3 = s21;
									break;
								case 5:
									tmp3 = null;
									break;
								default:
									this.warnings.push(json2object.Error.IncorrectType(field.name,"String",this.putils.convertPosition(content21.pos)));
									continue;
								}
								_g33.push(tmp3);
							}
							tmp2 = _g33;
							break;
						case 5:
							tmp2 = null;
							break;
						default:
							this.warnings.push(json2object.Error.IncorrectType(field.name,"Array",this.putils.convertPosition(content11.pos)));
							continue;
						}
						_g15.push(tmp2);
					}
					this.object.beforeBuildCommands = _g15;
					var key4 = field.name;
					if(__map_reserved[key4] != null) {
						assigned.setReserved(key4,true);
					} else {
						assigned.h[key4] = true;
					}
					break;
				case 5:
					this.object.beforeBuildCommands = null;
					var key5 = field.name;
					if(__map_reserved[key5] != null) {
						assigned.setReserved(key5,true);
					} else {
						assigned.h[key5] = true;
					}
					break;
				default:
					this.warnings.push(json2object.Error.IncorrectType(field.name,"Array",this.putils.convertPosition(field.value.pos)));
				}
				break;
			case "installCommands":
				var _g16 = field.value.value;
				switch(_g16[1]) {
				case 3:
					var s03 = _g16[2];
					var _g17 = [];
					var _g22 = 0;
					while(_g22 < s03.length) {
						var content12 = s03[_g22];
						++_g22;
						var _g34 = content12.value;
						var tmp4;
						switch(_g34[1]) {
						case 3:
							var s12 = _g34[2];
							var _g35 = [];
							var _g42 = 0;
							while(_g42 < s12.length) {
								var content22 = s12[_g42];
								++_g42;
								var _g52 = content22.value;
								var tmp5;
								switch(_g52[1]) {
								case 0:
									var s22 = _g52[2];
									tmp5 = s22;
									break;
								case 5:
									tmp5 = null;
									break;
								default:
									this.warnings.push(json2object.Error.IncorrectType(field.name,"String",this.putils.convertPosition(content22.pos)));
									continue;
								}
								_g35.push(tmp5);
							}
							tmp4 = _g35;
							break;
						case 5:
							tmp4 = null;
							break;
						default:
							this.warnings.push(json2object.Error.IncorrectType(field.name,"Array",this.putils.convertPosition(content12.pos)));
							continue;
						}
						_g17.push(tmp4);
					}
					this.object.installCommands = _g17;
					var key6 = field.name;
					if(__map_reserved[key6] != null) {
						assigned.setReserved(key6,true);
					} else {
						assigned.h[key6] = true;
					}
					break;
				case 5:
					this.object.installCommands = null;
					var key7 = field.name;
					if(__map_reserved[key7] != null) {
						assigned.setReserved(key7,true);
					} else {
						assigned.h[key7] = true;
					}
					break;
				default:
					this.warnings.push(json2object.Error.IncorrectType(field.name,"Array",this.putils.convertPosition(field.value.pos)));
				}
				break;
			case "targetDependencies":
				var _g18 = field.value.value;
				switch(_g18[1]) {
				case 3:
					var s04 = _g18[2];
					var _g19 = [];
					var _g23 = 0;
					while(_g23 < s04.length) {
						var content13 = s04[_g23];
						++_g23;
						var _g36 = content13.value;
						var tmp6;
						switch(_g36[1]) {
						case 0:
							var s13 = _g36[2];
							tmp6 = s13;
							break;
						case 5:
							tmp6 = null;
							break;
						default:
							this.warnings.push(json2object.Error.IncorrectType(field.name,"String",this.putils.convertPosition(content13.pos)));
							continue;
						}
						_g19.push(tmp6);
					}
					this.object.targetDependencies = _g19;
					var key8 = field.name;
					if(__map_reserved[key8] != null) {
						assigned.setReserved(key8,true);
					} else {
						assigned.h[key8] = true;
					}
					break;
				case 5:
					this.object.targetDependencies = null;
					var key9 = field.name;
					if(__map_reserved[key9] != null) {
						assigned.setReserved(key9,true);
					} else {
						assigned.h[key9] = true;
					}
					break;
				default:
					this.warnings.push(json2object.Error.IncorrectType(field.name,"Array",this.putils.convertPosition(field.value.pos)));
				}
				break;
			default:
				this.warnings.push(json2object.Error.UnknownVariable(field.name,this.putils.convertPosition(field.value.pos)));
			}
		}
		var lastPos = this.putils.convertPosition(new hxjsonast.Position(objectPos.file,objectPos.max - 1,objectPos.max));
		var s = assigned.keys();
		while(s.hasNext()) {
			var s3 = s.next();
			if(!(__map_reserved[s3] != null ? assigned.getReserved(s3) : assigned.h[s3])) {
				this.warnings.push(json2object.Error.UninitializedVariable(s3,lastPos));
			}
		}
		return this.object;
	}
	,__class__: JsonParser_Ano_afterBuildCommands_args_beforeBuildCommands_installCommands_targetDependencies_
};
var JsonParser_Ano_classPaths_deadCodeElimination_debug_defines_haxelibs_macros_main_noInline_output_packageName_workingDirectory_ = function(warnings,putils) {
	this.warnings = warnings == null ? [] : warnings;
	this.putils = putils;
};
JsonParser_Ano_classPaths_deadCodeElimination_debug_defines_haxelibs_macros_main_noInline_output_packageName_workingDirectory_.__name__ = true;
JsonParser_Ano_classPaths_deadCodeElimination_debug_defines_haxelibs_macros_main_noInline_output_packageName_workingDirectory_.prototype = {
	loadJson: function(fields,objectPos) {
		var assigned = new haxe.ds.StringMap();
		if(__map_reserved["classPaths"] != null) {
			assigned.setReserved("classPaths",true);
		} else {
			assigned.h["classPaths"] = true;
		}
		if(__map_reserved["deadCodeElimination"] != null) {
			assigned.setReserved("deadCodeElimination",true);
		} else {
			assigned.h["deadCodeElimination"] = true;
		}
		if(__map_reserved["debug"] != null) {
			assigned.setReserved("debug",true);
		} else {
			assigned.h["debug"] = true;
		}
		if(__map_reserved["defines"] != null) {
			assigned.setReserved("defines",true);
		} else {
			assigned.h["defines"] = true;
		}
		if(__map_reserved["haxelibs"] != null) {
			assigned.setReserved("haxelibs",true);
		} else {
			assigned.h["haxelibs"] = true;
		}
		if(__map_reserved["macros"] != null) {
			assigned.setReserved("macros",true);
		} else {
			assigned.h["macros"] = true;
		}
		if(__map_reserved["main"] != null) {
			assigned.setReserved("main",true);
		} else {
			assigned.h["main"] = true;
		}
		if(__map_reserved["noInline"] != null) {
			assigned.setReserved("noInline",true);
		} else {
			assigned.h["noInline"] = true;
		}
		if(__map_reserved["output"] != null) {
			assigned.setReserved("output",true);
		} else {
			assigned.h["output"] = true;
		}
		if(__map_reserved["packageName"] != null) {
			assigned.setReserved("packageName",true);
		} else {
			assigned.h["packageName"] = true;
		}
		if(__map_reserved["workingDirectory"] != null) {
			assigned.setReserved("workingDirectory",true);
		} else {
			assigned.h["workingDirectory"] = true;
		}
		this.object = { classPaths : null, deadCodeElimination : null, debug : null, defines : null, haxelibs : null, macros : null, main : null, noInline : null, output : null, packageName : null, workingDirectory : null};
		var _g = 0;
		while(_g < fields.length) {
			var field = fields[_g];
			++_g;
			var _g1 = field.name;
			switch(_g1) {
			case "classPaths":
				var _g11 = field.value.value;
				switch(_g11[1]) {
				case 3:
					var s0 = _g11[2];
					var _g12 = [];
					var _g2 = 0;
					while(_g2 < s0.length) {
						var content1 = s0[_g2];
						++_g2;
						var _g3 = content1.value;
						var tmp;
						switch(_g3[1]) {
						case 0:
							var s1 = _g3[2];
							tmp = s1;
							break;
						case 5:
							tmp = null;
							break;
						default:
							this.warnings.push(json2object.Error.IncorrectType(field.name,"String",this.putils.convertPosition(content1.pos)));
							continue;
						}
						_g12.push(tmp);
					}
					this.object.classPaths = _g12;
					var key = field.name;
					if(__map_reserved[key] != null) {
						assigned.setReserved(key,true);
					} else {
						assigned.h[key] = true;
					}
					break;
				case 5:
					this.object.classPaths = null;
					var key1 = field.name;
					if(__map_reserved[key1] != null) {
						assigned.setReserved(key1,true);
					} else {
						assigned.h[key1] = true;
					}
					break;
				default:
					this.warnings.push(json2object.Error.IncorrectType(field.name,"Array",this.putils.convertPosition(field.value.pos)));
				}
				break;
			case "deadCodeElimination":
				var _g13 = field.value.value;
				switch(_g13[1]) {
				case 0:
					var s01 = _g13[2];
					this.object.deadCodeElimination = s01;
					var key2 = field.name;
					if(__map_reserved[key2] != null) {
						assigned.setReserved(key2,true);
					} else {
						assigned.h[key2] = true;
					}
					break;
				case 5:
					this.object.deadCodeElimination = null;
					var key3 = field.name;
					if(__map_reserved[key3] != null) {
						assigned.setReserved(key3,true);
					} else {
						assigned.h[key3] = true;
					}
					break;
				default:
					this.warnings.push(json2object.Error.IncorrectType(field.name,"String",this.putils.convertPosition(field.value.pos)));
				}
				break;
			case "debug":
				var _g14 = field.value.value;
				switch(_g14[1]) {
				case 4:
					var s02 = _g14[2];
					this.object.debug = s02;
					var key4 = field.name;
					if(__map_reserved[key4] != null) {
						assigned.setReserved(key4,true);
					} else {
						assigned.h[key4] = true;
					}
					break;
				case 5:
					this.warnings.push(json2object.Error.IncorrectType(field.name,"Bool",this.putils.convertPosition(field.value.pos)));
					break;
				default:
					this.warnings.push(json2object.Error.IncorrectType(field.name,"Bool",this.putils.convertPosition(field.value.pos)));
				}
				break;
			case "defines":
				var _g15 = field.value.value;
				switch(_g15[1]) {
				case 3:
					var s03 = _g15[2];
					var _g16 = [];
					var _g21 = 0;
					while(_g21 < s03.length) {
						var content11 = s03[_g21];
						++_g21;
						var _g31 = content11.value;
						var tmp1;
						switch(_g31[1]) {
						case 0:
							var s11 = _g31[2];
							tmp1 = s11;
							break;
						case 5:
							tmp1 = null;
							break;
						default:
							this.warnings.push(json2object.Error.IncorrectType(field.name,"String",this.putils.convertPosition(content11.pos)));
							continue;
						}
						_g16.push(tmp1);
					}
					this.object.defines = _g16;
					var key5 = field.name;
					if(__map_reserved[key5] != null) {
						assigned.setReserved(key5,true);
					} else {
						assigned.h[key5] = true;
					}
					break;
				case 5:
					this.object.defines = null;
					var key6 = field.name;
					if(__map_reserved[key6] != null) {
						assigned.setReserved(key6,true);
					} else {
						assigned.h[key6] = true;
					}
					break;
				default:
					this.warnings.push(json2object.Error.IncorrectType(field.name,"Array",this.putils.convertPosition(field.value.pos)));
				}
				break;
			case "haxelibs":
				var _g17 = field.value.value;
				switch(_g17[1]) {
				case 3:
					var s04 = _g17[2];
					var _g18 = [];
					var _g22 = 0;
					while(_g22 < s04.length) {
						var content12 = s04[_g22];
						++_g22;
						var _g32 = content12.value;
						var tmp2;
						switch(_g32[1]) {
						case 0:
							var s12 = _g32[2];
							tmp2 = s12;
							break;
						case 5:
							tmp2 = null;
							break;
						default:
							this.warnings.push(json2object.Error.IncorrectType(field.name,"String",this.putils.convertPosition(content12.pos)));
							continue;
						}
						_g18.push(tmp2);
					}
					this.object.haxelibs = _g18;
					var key7 = field.name;
					if(__map_reserved[key7] != null) {
						assigned.setReserved(key7,true);
					} else {
						assigned.h[key7] = true;
					}
					break;
				case 5:
					this.object.haxelibs = null;
					var key8 = field.name;
					if(__map_reserved[key8] != null) {
						assigned.setReserved(key8,true);
					} else {
						assigned.h[key8] = true;
					}
					break;
				default:
					this.warnings.push(json2object.Error.IncorrectType(field.name,"Array",this.putils.convertPosition(field.value.pos)));
				}
				break;
			case "macros":
				var _g19 = field.value.value;
				switch(_g19[1]) {
				case 3:
					var s05 = _g19[2];
					var _g110 = [];
					var _g23 = 0;
					while(_g23 < s05.length) {
						var content13 = s05[_g23];
						++_g23;
						var _g33 = content13.value;
						var tmp3;
						switch(_g33[1]) {
						case 0:
							var s13 = _g33[2];
							tmp3 = s13;
							break;
						case 5:
							tmp3 = null;
							break;
						default:
							this.warnings.push(json2object.Error.IncorrectType(field.name,"String",this.putils.convertPosition(content13.pos)));
							continue;
						}
						_g110.push(tmp3);
					}
					this.object.macros = _g110;
					var key9 = field.name;
					if(__map_reserved[key9] != null) {
						assigned.setReserved(key9,true);
					} else {
						assigned.h[key9] = true;
					}
					break;
				case 5:
					this.object.macros = null;
					var key10 = field.name;
					if(__map_reserved[key10] != null) {
						assigned.setReserved(key10,true);
					} else {
						assigned.h[key10] = true;
					}
					break;
				default:
					this.warnings.push(json2object.Error.IncorrectType(field.name,"Array",this.putils.convertPosition(field.value.pos)));
				}
				break;
			case "main":
				var _g111 = field.value.value;
				switch(_g111[1]) {
				case 0:
					var s06 = _g111[2];
					this.object.main = s06;
					var key11 = field.name;
					if(__map_reserved[key11] != null) {
						assigned.setReserved(key11,true);
					} else {
						assigned.h[key11] = true;
					}
					break;
				case 5:
					this.object.main = null;
					var key12 = field.name;
					if(__map_reserved[key12] != null) {
						assigned.setReserved(key12,true);
					} else {
						assigned.h[key12] = true;
					}
					break;
				default:
					this.warnings.push(json2object.Error.IncorrectType(field.name,"String",this.putils.convertPosition(field.value.pos)));
				}
				break;
			case "noInline":
				var _g112 = field.value.value;
				switch(_g112[1]) {
				case 4:
					var s07 = _g112[2];
					this.object.noInline = s07;
					var key13 = field.name;
					if(__map_reserved[key13] != null) {
						assigned.setReserved(key13,true);
					} else {
						assigned.h[key13] = true;
					}
					break;
				case 5:
					this.warnings.push(json2object.Error.IncorrectType(field.name,"Bool",this.putils.convertPosition(field.value.pos)));
					break;
				default:
					this.warnings.push(json2object.Error.IncorrectType(field.name,"Bool",this.putils.convertPosition(field.value.pos)));
				}
				break;
			case "output":
				var _g113 = field.value.value;
				switch(_g113[1]) {
				case 2:
					var s08 = _g113[2];
					this.object.output = new JsonParser_Ano_path___Inst_Stringtarget___Abstract_HaxeTarget(this.warnings,this.putils).loadJson(s08,field.value.pos);
					var key14 = field.name;
					if(__map_reserved[key14] != null) {
						assigned.setReserved(key14,true);
					} else {
						assigned.h[key14] = true;
					}
					break;
				case 5:
					this.object.output = null;
					var key15 = field.name;
					if(__map_reserved[key15] != null) {
						assigned.setReserved(key15,true);
					} else {
						assigned.h[key15] = true;
					}
					break;
				default:
					this.warnings.push(json2object.Error.IncorrectType(field.name,"Anonymous",this.putils.convertPosition(field.value.pos)));
				}
				break;
			case "packageName":
				var _g114 = field.value.value;
				switch(_g114[1]) {
				case 0:
					var s09 = _g114[2];
					this.object.packageName = s09;
					var key16 = field.name;
					if(__map_reserved[key16] != null) {
						assigned.setReserved(key16,true);
					} else {
						assigned.h[key16] = true;
					}
					break;
				case 5:
					this.object.packageName = null;
					var key17 = field.name;
					if(__map_reserved[key17] != null) {
						assigned.setReserved(key17,true);
					} else {
						assigned.h[key17] = true;
					}
					break;
				default:
					this.warnings.push(json2object.Error.IncorrectType(field.name,"String",this.putils.convertPosition(field.value.pos)));
				}
				break;
			case "workingDirectory":
				var _g115 = field.value.value;
				switch(_g115[1]) {
				case 0:
					var s010 = _g115[2];
					this.object.workingDirectory = s010;
					var key18 = field.name;
					if(__map_reserved[key18] != null) {
						assigned.setReserved(key18,true);
					} else {
						assigned.h[key18] = true;
					}
					break;
				case 5:
					this.object.workingDirectory = null;
					var key19 = field.name;
					if(__map_reserved[key19] != null) {
						assigned.setReserved(key19,true);
					} else {
						assigned.h[key19] = true;
					}
					break;
				default:
					this.warnings.push(json2object.Error.IncorrectType(field.name,"String",this.putils.convertPosition(field.value.pos)));
				}
				break;
			default:
				this.warnings.push(json2object.Error.UnknownVariable(field.name,this.putils.convertPosition(field.value.pos)));
			}
		}
		var lastPos = this.putils.convertPosition(new hxjsonast.Position(objectPos.file,objectPos.max - 1,objectPos.max));
		var s = assigned.keys();
		while(s.hasNext()) {
			var s2 = s.next();
			if(!(__map_reserved[s2] != null ? assigned.getReserved(s2) : assigned.h[s2])) {
				this.warnings.push(json2object.Error.UninitializedVariable(s2,lastPos));
			}
		}
		return this.object;
	}
	,__class__: JsonParser_Ano_classPaths_deadCodeElimination_debug_defines_haxelibs_macros_main_noInline_output_packageName_workingDirectory_
};
var JsonParser_Ano_haxelibs___Abstract_ArrayHandle___Ano_installArgs_____Abstract_ArrayHandle_____Inst_Stringname_____Inst_Stringinherit_mainTarget_targets___Abstract_ArrayHandle___Ano_afterBuildCommands_args_beforeBuildCommands_composite_debug_display_inherit_installCommands_isBuildCommand_isTestCommand_name_____Inst_StringtargetDependencies_ = function(warnings,putils) {
	this.warnings = warnings == null ? [] : warnings;
	this.putils = putils;
};
JsonParser_Ano_haxelibs___Abstract_ArrayHandle___Ano_installArgs_____Abstract_ArrayHandle_____Inst_Stringname_____Inst_Stringinherit_mainTarget_targets___Abstract_ArrayHandle___Ano_afterBuildCommands_args_beforeBuildCommands_composite_debug_display_inherit_installCommands_isBuildCommand_isTestCommand_name_____Inst_StringtargetDependencies_.__name__ = true;
JsonParser_Ano_haxelibs___Abstract_ArrayHandle___Ano_installArgs_____Abstract_ArrayHandle_____Inst_Stringname_____Inst_Stringinherit_mainTarget_targets___Abstract_ArrayHandle___Ano_afterBuildCommands_args_beforeBuildCommands_composite_debug_display_inherit_installCommands_isBuildCommand_isTestCommand_name_____Inst_StringtargetDependencies_.prototype = {
	loadJson: function(fields,objectPos) {
		var assigned = new haxe.ds.StringMap();
		if(__map_reserved["haxelibs"] != null) {
			assigned.setReserved("haxelibs",false);
		} else {
			assigned.h["haxelibs"] = false;
		}
		if(__map_reserved["inherit"] != null) {
			assigned.setReserved("inherit",true);
		} else {
			assigned.h["inherit"] = true;
		}
		if(__map_reserved["mainTarget"] != null) {
			assigned.setReserved("mainTarget",true);
		} else {
			assigned.h["mainTarget"] = true;
		}
		if(__map_reserved["targets"] != null) {
			assigned.setReserved("targets",false);
		} else {
			assigned.h["targets"] = false;
		}
		this.object = { haxelibs : null, inherit : null, mainTarget : null, targets : null};
		var _g = 0;
		while(_g < fields.length) {
			var field = fields[_g];
			++_g;
			var _g1 = field.name;
			switch(_g1) {
			case "haxelibs":
				var _g11 = field.value.value;
				switch(_g11[1]) {
				case 3:
					var s0 = _g11[2];
					var _g12 = [];
					var _g2 = 0;
					while(_g2 < s0.length) {
						var content1 = s0[_g2];
						++_g2;
						var _g3 = content1.value;
						var tmp;
						switch(_g3[1]) {
						case 2:
							var s1 = _g3[2];
							tmp = new JsonParser_Ano_installArgs___Abstract_ArrayHandle___Inst_Stringname___Inst_String(this.warnings,this.putils).loadJson(s1,content1.pos);
							break;
						case 5:
							tmp = null;
							break;
						default:
							this.warnings.push(json2object.Error.IncorrectType(field.name,"Anonymous",this.putils.convertPosition(content1.pos)));
							continue;
						}
						_g12.push(tmp);
					}
					this.object.haxelibs = _g12;
					var key = field.name;
					if(__map_reserved[key] != null) {
						assigned.setReserved(key,true);
					} else {
						assigned.h[key] = true;
					}
					break;
				case 5:
					this.object.haxelibs = null;
					var key1 = field.name;
					if(__map_reserved[key1] != null) {
						assigned.setReserved(key1,true);
					} else {
						assigned.h[key1] = true;
					}
					break;
				default:
					this.warnings.push(json2object.Error.IncorrectType(field.name,"Array",this.putils.convertPosition(field.value.pos)));
				}
				break;
			case "inherit":
				var _g13 = field.value.value;
				switch(_g13[1]) {
				case 0:
					var s01 = _g13[2];
					this.object.inherit = s01;
					var key2 = field.name;
					if(__map_reserved[key2] != null) {
						assigned.setReserved(key2,true);
					} else {
						assigned.h[key2] = true;
					}
					break;
				case 5:
					this.object.inherit = null;
					var key3 = field.name;
					if(__map_reserved[key3] != null) {
						assigned.setReserved(key3,true);
					} else {
						assigned.h[key3] = true;
					}
					break;
				default:
					this.warnings.push(json2object.Error.IncorrectType(field.name,"String",this.putils.convertPosition(field.value.pos)));
				}
				break;
			case "mainTarget":
				var _g14 = field.value.value;
				switch(_g14[1]) {
				case 0:
					var s02 = _g14[2];
					this.object.mainTarget = s02;
					var key4 = field.name;
					if(__map_reserved[key4] != null) {
						assigned.setReserved(key4,true);
					} else {
						assigned.h[key4] = true;
					}
					break;
				case 5:
					this.object.mainTarget = null;
					var key5 = field.name;
					if(__map_reserved[key5] != null) {
						assigned.setReserved(key5,true);
					} else {
						assigned.h[key5] = true;
					}
					break;
				default:
					this.warnings.push(json2object.Error.IncorrectType(field.name,"String",this.putils.convertPosition(field.value.pos)));
				}
				break;
			case "targets":
				var _g15 = field.value.value;
				switch(_g15[1]) {
				case 3:
					var s03 = _g15[2];
					var _g16 = [];
					var _g21 = 0;
					while(_g21 < s03.length) {
						var content11 = s03[_g21];
						++_g21;
						var _g31 = content11.value;
						var tmp1;
						switch(_g31[1]) {
						case 2:
							var s11 = _g31[2];
							tmp1 = new JsonParser_Ano_afterBuildCommands_args_beforeBuildCommands_composite_debug_display_inherit_installCommands_isBuildCommand_isTestCommand_name___Inst_StringtargetDependencies_(this.warnings,this.putils).loadJson(s11,content11.pos);
							break;
						case 5:
							tmp1 = null;
							break;
						default:
							this.warnings.push(json2object.Error.IncorrectType(field.name,"Anonymous",this.putils.convertPosition(content11.pos)));
							continue;
						}
						_g16.push(tmp1);
					}
					this.object.targets = _g16;
					var key6 = field.name;
					if(__map_reserved[key6] != null) {
						assigned.setReserved(key6,true);
					} else {
						assigned.h[key6] = true;
					}
					break;
				case 5:
					this.object.targets = null;
					var key7 = field.name;
					if(__map_reserved[key7] != null) {
						assigned.setReserved(key7,true);
					} else {
						assigned.h[key7] = true;
					}
					break;
				default:
					this.warnings.push(json2object.Error.IncorrectType(field.name,"Array",this.putils.convertPosition(field.value.pos)));
				}
				break;
			default:
				this.warnings.push(json2object.Error.UnknownVariable(field.name,this.putils.convertPosition(field.value.pos)));
			}
		}
		var lastPos = this.putils.convertPosition(new hxjsonast.Position(objectPos.file,objectPos.max - 1,objectPos.max));
		var s = assigned.keys();
		while(s.hasNext()) {
			var s2 = s.next();
			if(!(__map_reserved[s2] != null ? assigned.getReserved(s2) : assigned.h[s2])) {
				this.warnings.push(json2object.Error.UninitializedVariable(s2,lastPos));
			}
		}
		return this.object;
	}
	,fromJson: function(jsonString,filename) {
		this.putils = new json2object.PosUtils(jsonString);
		try {
			var json = new hxjsonast.Parser(jsonString,filename).parseRec();
			var _g = json.value;
			if(_g[1] == 2) {
				var fields = _g[2];
				return this.loadJson(fields,json.pos);
			} else {
				return null;
			}
		} catch( e ) {
			if (e instanceof js._Boot.HaxeError) e = e.val;
			if( js.Boot.__instanceof(e,hxjsonast.Error) ) {
				throw new js._Boot.HaxeError(json2object.Error.ParserError(e.message,this.putils.convertPosition(e.pos)));
			} else throw(e);
		}
	}
	,__class__: JsonParser_Ano_haxelibs___Abstract_ArrayHandle___Ano_installArgs_____Abstract_ArrayHandle_____Inst_Stringname_____Inst_Stringinherit_mainTarget_targets___Abstract_ArrayHandle___Ano_afterBuildCommands_args_beforeBuildCommands_composite_debug_display_inherit_installCommands_isBuildCommand_isTestCommand_name_____Inst_StringtargetDependencies_
};
var JsonParser_Ano_installArgs___Abstract_ArrayHandle___Inst_Stringname___Inst_String = function(warnings,putils) {
	this.warnings = warnings == null ? [] : warnings;
	this.putils = putils;
};
JsonParser_Ano_installArgs___Abstract_ArrayHandle___Inst_Stringname___Inst_String.__name__ = true;
JsonParser_Ano_installArgs___Abstract_ArrayHandle___Inst_Stringname___Inst_String.prototype = {
	loadJson: function(fields,objectPos) {
		var assigned = new haxe.ds.StringMap();
		if(__map_reserved["installArgs"] != null) {
			assigned.setReserved("installArgs",false);
		} else {
			assigned.h["installArgs"] = false;
		}
		if(__map_reserved["name"] != null) {
			assigned.setReserved("name",false);
		} else {
			assigned.h["name"] = false;
		}
		this.object = { installArgs : null, name : null};
		var _g = 0;
		while(_g < fields.length) {
			var field = fields[_g];
			++_g;
			var _g1 = field.name;
			switch(_g1) {
			case "installArgs":
				var _g11 = field.value.value;
				switch(_g11[1]) {
				case 3:
					var s0 = _g11[2];
					var _g12 = [];
					var _g2 = 0;
					while(_g2 < s0.length) {
						var content1 = s0[_g2];
						++_g2;
						var _g3 = content1.value;
						var tmp;
						switch(_g3[1]) {
						case 0:
							var s1 = _g3[2];
							tmp = s1;
							break;
						case 5:
							tmp = null;
							break;
						default:
							this.warnings.push(json2object.Error.IncorrectType(field.name,"String",this.putils.convertPosition(content1.pos)));
							continue;
						}
						_g12.push(tmp);
					}
					this.object.installArgs = _g12;
					var key = field.name;
					if(__map_reserved[key] != null) {
						assigned.setReserved(key,true);
					} else {
						assigned.h[key] = true;
					}
					break;
				case 5:
					this.object.installArgs = null;
					var key1 = field.name;
					if(__map_reserved[key1] != null) {
						assigned.setReserved(key1,true);
					} else {
						assigned.h[key1] = true;
					}
					break;
				default:
					this.warnings.push(json2object.Error.IncorrectType(field.name,"Array",this.putils.convertPosition(field.value.pos)));
				}
				break;
			case "name":
				var _g13 = field.value.value;
				switch(_g13[1]) {
				case 0:
					var s01 = _g13[2];
					this.object.name = s01;
					var key2 = field.name;
					if(__map_reserved[key2] != null) {
						assigned.setReserved(key2,true);
					} else {
						assigned.h[key2] = true;
					}
					break;
				case 5:
					this.object.name = null;
					var key3 = field.name;
					if(__map_reserved[key3] != null) {
						assigned.setReserved(key3,true);
					} else {
						assigned.h[key3] = true;
					}
					break;
				default:
					this.warnings.push(json2object.Error.IncorrectType(field.name,"String",this.putils.convertPosition(field.value.pos)));
				}
				break;
			default:
				this.warnings.push(json2object.Error.UnknownVariable(field.name,this.putils.convertPosition(field.value.pos)));
			}
		}
		var lastPos = this.putils.convertPosition(new hxjsonast.Position(objectPos.file,objectPos.max - 1,objectPos.max));
		var s = assigned.keys();
		while(s.hasNext()) {
			var s2 = s.next();
			if(!(__map_reserved[s2] != null ? assigned.getReserved(s2) : assigned.h[s2])) {
				this.warnings.push(json2object.Error.UninitializedVariable(s2,lastPos));
			}
		}
		return this.object;
	}
	,__class__: JsonParser_Ano_installArgs___Abstract_ArrayHandle___Inst_Stringname___Inst_String
};
var JsonParser_Ano_path___Inst_Stringtarget___Abstract_HaxeTarget = function(warnings,putils) {
	this.warnings = warnings == null ? [] : warnings;
	this.putils = putils;
};
JsonParser_Ano_path___Inst_Stringtarget___Abstract_HaxeTarget.__name__ = true;
JsonParser_Ano_path___Inst_Stringtarget___Abstract_HaxeTarget.prototype = {
	loadJson: function(fields,objectPos) {
		var assigned = new haxe.ds.StringMap();
		if(__map_reserved["path"] != null) {
			assigned.setReserved("path",false);
		} else {
			assigned.h["path"] = false;
		}
		if(__map_reserved["target"] != null) {
			assigned.setReserved("target",false);
		} else {
			assigned.h["target"] = false;
		}
		this.object = { path : null, target : null};
		var _g = 0;
		while(_g < fields.length) {
			var field = fields[_g];
			++_g;
			var _g1 = field.name;
			switch(_g1) {
			case "path":
				var _g11 = field.value.value;
				switch(_g11[1]) {
				case 0:
					var s0 = _g11[2];
					this.object.path = s0;
					var key = field.name;
					if(__map_reserved[key] != null) {
						assigned.setReserved(key,true);
					} else {
						assigned.h[key] = true;
					}
					break;
				case 5:
					this.object.path = null;
					var key1 = field.name;
					if(__map_reserved[key1] != null) {
						assigned.setReserved(key1,true);
					} else {
						assigned.h[key1] = true;
					}
					break;
				default:
					this.warnings.push(json2object.Error.IncorrectType(field.name,"String",this.putils.convertPosition(field.value.pos)));
				}
				break;
			case "target":
				var _g12 = field.value.value;
				switch(_g12[1]) {
				case 0:
					var s01 = _g12[2];
					this.object.target = s01;
					var key2 = field.name;
					if(__map_reserved[key2] != null) {
						assigned.setReserved(key2,true);
					} else {
						assigned.h[key2] = true;
					}
					break;
				case 5:
					this.object.target = null;
					var key3 = field.name;
					if(__map_reserved[key3] != null) {
						assigned.setReserved(key3,true);
					} else {
						assigned.h[key3] = true;
					}
					break;
				default:
					this.warnings.push(json2object.Error.IncorrectType(field.name,"String",this.putils.convertPosition(field.value.pos)));
				}
				break;
			default:
				this.warnings.push(json2object.Error.UnknownVariable(field.name,this.putils.convertPosition(field.value.pos)));
			}
		}
		var lastPos = this.putils.convertPosition(new hxjsonast.Position(objectPos.file,objectPos.max - 1,objectPos.max));
		var s = assigned.keys();
		while(s.hasNext()) {
			var s1 = s.next();
			if(!(__map_reserved[s1] != null ? assigned.getReserved(s1) : assigned.h[s1])) {
				this.warnings.push(json2object.Error.UninitializedVariable(s1,lastPos));
			}
		}
		return this.object;
	}
	,__class__: JsonParser_Ano_path___Inst_Stringtarget___Abstract_HaxeTarget
};
var List = function() {
	this.length = 0;
};
List.__name__ = true;
List.prototype = {
	iterator: function() {
		return new _List.ListIterator(this.h);
	}
	,__class__: List
};
var _List = {};
_List.ListNode = function() { };
_List.ListNode.__name__ = true;
_List.ListNode.prototype = {
	__class__: _List.ListNode
};
_List.ListIterator = function(head) {
	this.head = head;
};
_List.ListIterator.__name__ = true;
_List.ListIterator.prototype = {
	hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: _List.ListIterator
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.copy = function(o) {
	var o2 = { };
	var _g = 0;
	var _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		o2[f] = Reflect.field(o,f);
	}
	return o2;
};
var SourceMap = function(sourceMapData) {
	this.mappings = [];
	this.sourceRoot = "";
	this.version = 3;
	this.parse(sourceMapData);
};
SourceMap.__name__ = true;
SourceMap.prototype = {
	originalPositionFor: function(line,column) {
		if(column == null) {
			column = 0;
		}
		if(line < 1 || line > this.mappings.length) {
			return null;
		}
		var pos = null;
		var _g = 0;
		var _g1 = this.mappings[line - 1];
		while(_g < _g1.length) {
			var mapping = _g1[_g];
			++_g;
			if(mapping[0] <= column) {
				var pos1 = { generatedLine : line, generatedColumn : mapping[0]};
				if(mapping.length > 1) {
					pos1.originalLine = mapping[2] + 1;
					pos1.originalColumn = mapping[3];
					pos1.source = this.sourceRoot + this.sources[mapping[1]];
					if(mapping.length > 4) {
						pos1.name = this.names[mapping[4]];
					}
				}
				pos = pos1;
				break;
			}
		}
		return pos;
	}
	,parse: function(json) {
		var data = JSON.parse(json);
		if(data == null) {
			throw new js._Boot.HaxeError("Failed to parse source map data.");
		}
		this.version = data.version;
		this.file = data.file;
		this.sourceRoot = data.sourceRoot == null ? "" : data.sourceRoot;
		this.sources = data.sources;
		this.sourcesContent = data.sourcesContent == null ? [] : data.sourcesContent;
		this.names = data.names;
		var encoded = data.mappings.split(";");
		this.mappings[encoded.length - 1] = null;
		var previousSource = 0;
		var previousLine = 0;
		var previousColumn = 0;
		var previousName = 0;
		var _g1 = 0;
		var _g = encoded.length;
		while(_g1 < _g) {
			var l = _g1++;
			this.mappings[l] = [];
			if(encoded[l].length == 0) {
				continue;
			}
			var previousGeneratedColumn = 0;
			var segments = encoded[l].split(",");
			this.mappings[l][segments.length - 1] = null;
			var _g3 = 0;
			var _g2 = segments.length;
			while(_g3 < _g2) {
				var s = _g3++;
				var vlq = segments[s];
				var data1 = [0,0,0,0];
				var index = -1;
				var _g11 = 0;
				var _g4 = data1.length;
				while(_g11 < _g4) {
					var i = _g11++;
					var value = 0;
					var shift = 0;
					var digit;
					var masked;
					while(true) {
						var charCode = vlq.charCodeAt(++index);
						if(97 <= charCode) {
							digit = charCode - 97 + 26;
						} else if(65 <= charCode) {
							digit = charCode - 65;
						} else if(48 <= charCode) {
							digit = charCode - 48 + 52;
						} else if(charCode == 43) {
							digit = 62;
						} else {
							digit = 63;
						}
						masked = digit & 31;
						value += masked << shift;
						shift += 5;
						if(!(digit != masked)) {
							break;
						}
					}
					data1[i] = (value & 1) == 1 ? -(value >> 1) : value >> 1;
				}
				var mapping = data1;
				this.mappings[l][s] = mapping;
				mapping[0] += previousGeneratedColumn;
				if(mapping.length > 1) {
					mapping[1] += previousSource;
					mapping[2] += previousLine;
					mapping[3] += previousColumn;
					if(mapping.length > 4) {
						mapping[4] += previousName;
						previousName = mapping[4];
					}
					previousLine = mapping[2];
					previousSource = mapping[1];
					previousColumn = mapping[3];
				}
				previousGeneratedColumn = mapping[0];
			}
		}
	}
	,__class__: SourceMap
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js.Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = true;
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return HxOverrides.substr(s,0,start.length) == start;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
var Type = function() { };
Type.__name__ = true;
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw new js._Boot.HaxeError("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw new js._Boot.HaxeError("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw new js._Boot.HaxeError("Constructor " + constr + " does not need parameters");
	}
	return f;
};
var haxe = {};
haxe.StackItem = { __ename__ : true, __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"] };
haxe.StackItem.CFunction = ["CFunction",0];
haxe.StackItem.CFunction.toString = $estr;
haxe.StackItem.CFunction.__enum__ = haxe.StackItem;
haxe.StackItem.Module = function(m) { var $x = ["Module",1,m]; $x.__enum__ = haxe.StackItem; $x.toString = $estr; return $x; };
haxe.StackItem.FilePos = function(s,file,line) { var $x = ["FilePos",2,s,file,line]; $x.__enum__ = haxe.StackItem; $x.toString = $estr; return $x; };
haxe.StackItem.Method = function(classname,method) { var $x = ["Method",3,classname,method]; $x.__enum__ = haxe.StackItem; $x.toString = $estr; return $x; };
haxe.StackItem.LocalFunction = function(v) { var $x = ["LocalFunction",4,v]; $x.__enum__ = haxe.StackItem; $x.toString = $estr; return $x; };
haxe.CallStack = function() { };
haxe.CallStack.__name__ = true;
haxe.CallStack.getStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			if(haxe.CallStack.wrapCallSite != null) {
				site = haxe.CallStack.wrapCallSite(site);
			}
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe.StackItem.Method(className,methodName);
				}
			}
			stack.push(haxe.StackItem.FilePos(method,site.getFileName(),site.getLineNumber()));
		}
		return stack;
	};
	var a = haxe.CallStack.makeStack(e.stack);
	Error.prepareStackTrace = oldValue;
	return a;
};
haxe.CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe.CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe.CallStack.itemToString = function(b,s) {
	switch(s[1]) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s[2];
		b.b = (b.b += "module ") + (m == null ? "null" : "" + m);
		break;
	case 2:
		var line = s[4];
		var file = s[3];
		var s1 = s[2];
		if(s1 != null) {
			haxe.CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b = (b.b += file == null ? "null" : "" + file) + " line ";
		b.b += line == null ? "null" : "" + line;
		if(s1 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var meth = s[3];
		var cname = s[2];
		b.b = (b.b += cname == null ? "null" : "" + cname) + ".";
		b.b += meth == null ? "null" : "" + meth;
		break;
	case 4:
		var n = s[2];
		b.b = (b.b += "local function #") + (n == null ? "null" : "" + n);
		break;
	}
};
haxe.CallStack.makeStack = function(s) {
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				m.push(haxe.StackItem.FilePos(meth == "Anonymous function" ? haxe.StackItem.LocalFunction() : meth == "Global code" ? null : haxe.StackItem.Method(path.join("."),meth),file,line1));
			} else {
				m.push(haxe.StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else {
		return s;
	}
};
haxe.IMap = function() { };
haxe.IMap.__name__ = true;
haxe.Http = function(url) {
	this.url = url;
	this.headers = new List();
	this.params = new List();
};
haxe.Http.__name__ = true;
haxe.Http.prototype = {
	request: function(post) {
		var me = this;
		me.responseData = null;
		var parsedUrl = js.node.Url.parse(this.url);
		var secure = parsedUrl.protocol == "https:";
		var host = parsedUrl.hostname;
		var path = parsedUrl.path;
		var port = parsedUrl.port != null ? Std.parseInt(parsedUrl.port) : secure ? 443 : 80;
		var h = { };
		var _g_head = this.headers.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var i = val;
			var arr = Reflect.field(h,i.header);
			if(arr == null) {
				arr = [];
				h[i.header] = arr;
			}
			arr.push(i.value);
		}
		var uri = this.postData;
		if(uri != null) {
			post = true;
		} else {
			var _g_head1 = this.params.h;
			while(_g_head1 != null) {
				var val1 = _g_head1.item;
				_g_head1 = _g_head1.next;
				var p = val1;
				if(uri == null) {
					uri = "";
				} else {
					uri += "&";
				}
				var s = p.param;
				var uri1 = encodeURIComponent(s) + "=";
				var s1 = p.value;
				uri += uri1 + encodeURIComponent(s1);
			}
		}
		var question = path.split("?").length <= 1;
		if(!post && uri != null) {
			path += (question ? "?" : "&") + uri;
		}
		var opts = { protocol : parsedUrl.protocol, hostname : host, port : port, method : post ? "POST" : "GET", path : path, headers : h};
		var httpResponse = function(res) {
			var s2 = res.statusCode;
			if(s2 != null) {
				me.onStatus(s2);
			}
			var body = "";
			res.on("data",function(d) {
				body += d;
			});
			res.on("end",function(_) {
				me.responseData = body;
				me.req = null;
				if(s2 != null && s2 >= 200 && s2 < 400) {
					me.onData(body);
				} else {
					me.onError("Http Error #" + s2);
				}
			});
		};
		this.req = secure ? js.node.Https.request(opts,httpResponse) : js.node.Http.request(opts,httpResponse);
		if(post) {
			this.req.write(uri);
		}
		this.req.end();
	}
	,onData: function(data) {
	}
	,onError: function(msg) {
	}
	,onStatus: function(status) {
	}
	,__class__: haxe.Http
};
haxe.ds = {};
haxe.ds.Option = { __ename__ : true, __constructs__ : ["Some","None"] };
haxe.ds.Option.Some = function(v) { var $x = ["Some",0,v]; $x.__enum__ = haxe.ds.Option; $x.toString = $estr; return $x; };
haxe.ds.Option.None = ["None",1];
haxe.ds.Option.None.toString = $estr;
haxe.ds.Option.None.__enum__ = haxe.ds.Option;
haxe.ds.StringMap = function() {
	this.h = { };
};
haxe.ds.StringMap.__name__ = true;
haxe.ds.StringMap.__interfaces__ = [haxe.IMap];
haxe.ds.StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe.ds.StringMap
};
haxe.io = {};
haxe.io.Bytes = function() { };
haxe.io.Bytes.__name__ = true;
haxe.io.Bytes.prototype = {
	__class__: haxe.io.Bytes
};
haxe.io.Eof = function() { };
haxe.io.Eof.__name__ = true;
haxe.io.Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe.io.Eof
};
haxe.io.Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
haxe.io.Path.__name__ = true;
haxe.io.Path.join = function(paths) {
	var paths1 = paths.filter(function(s) {
		if(s != null) {
			return s != "";
		} else {
			return false;
		}
	});
	if(paths1.length == 0) {
		return "";
	}
	var path = paths1[0];
	var _g1 = 1;
	var _g = paths1.length;
	while(_g1 < _g) {
		var i = _g1++;
		path = haxe.io.Path.addTrailingSlash(path);
		path += paths1[i];
	}
	return haxe.io.Path.normalize(path);
};
haxe.io.Path.normalize = function(path) {
	path = path.split("\\").join("/");
	if(path == "/") {
		return "/";
	}
	var target = [];
	var _g = 0;
	var _g1 = path.split("/");
	while(_g < _g1.length) {
		var token = _g1[_g];
		++_g;
		if(token == ".." && target.length > 0 && target[target.length - 1] != "..") {
			target.pop();
		} else if(token != ".") {
			target.push(token);
		}
	}
	var tmp = target.join("/");
	var regex_r = new RegExp("([^:])/+","g".split("u").join(""));
	tmp.replace(regex_r,"$1" + "/");
	var acc_b = "";
	var colon = false;
	var slashes = false;
	var _g11 = 0;
	var _g2 = tmp.length;
	while(_g11 < _g2) {
		var i = _g11++;
		var _g21 = tmp.charCodeAt(i);
		switch(_g21) {
		case 47:
			if(!colon) {
				slashes = true;
			} else {
				colon = false;
				if(slashes) {
					acc_b += "/";
					slashes = false;
				}
				acc_b += String.fromCharCode(_g21);
			}
			break;
		case 58:
			acc_b += ":";
			colon = true;
			break;
		default:
			colon = false;
			if(slashes) {
				acc_b += "/";
				slashes = false;
			}
			acc_b += String.fromCharCode(_g21);
		}
	}
	return acc_b;
};
haxe.io.Path.addTrailingSlash = function(path) {
	if(path.length == 0) {
		return "/";
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		if(c2 != path.length - 1) {
			return path + "\\";
		} else {
			return path;
		}
	} else if(c1 != path.length - 1) {
		return path + "/";
	} else {
		return path;
	}
};
haxe.io.Path.prototype = {
	__class__: haxe.io.Path
};
var hxjsonast = {};
hxjsonast.Error = function(message,pos) {
	this.message = message;
	this.pos = pos;
};
hxjsonast.Error.__name__ = true;
hxjsonast.Error.prototype = {
	__class__: hxjsonast.Error
};
hxjsonast.Json = function(value,pos) {
	this.value = value;
	this.pos = pos;
};
hxjsonast.Json.__name__ = true;
hxjsonast.Json.prototype = {
	__class__: hxjsonast.Json
};
hxjsonast.JsonValue = { __ename__ : true, __constructs__ : ["JString","JNumber","JObject","JArray","JBool","JNull"] };
hxjsonast.JsonValue.JString = function(s) { var $x = ["JString",0,s]; $x.__enum__ = hxjsonast.JsonValue; $x.toString = $estr; return $x; };
hxjsonast.JsonValue.JNumber = function(s) { var $x = ["JNumber",1,s]; $x.__enum__ = hxjsonast.JsonValue; $x.toString = $estr; return $x; };
hxjsonast.JsonValue.JObject = function(fields) { var $x = ["JObject",2,fields]; $x.__enum__ = hxjsonast.JsonValue; $x.toString = $estr; return $x; };
hxjsonast.JsonValue.JArray = function(values) { var $x = ["JArray",3,values]; $x.__enum__ = hxjsonast.JsonValue; $x.toString = $estr; return $x; };
hxjsonast.JsonValue.JBool = function(b) { var $x = ["JBool",4,b]; $x.__enum__ = hxjsonast.JsonValue; $x.toString = $estr; return $x; };
hxjsonast.JsonValue.JNull = ["JNull",5];
hxjsonast.JsonValue.JNull.toString = $estr;
hxjsonast.JsonValue.JNull.__enum__ = hxjsonast.JsonValue;
hxjsonast.JObjectField = function(name,namePos,value) {
	this.name = name;
	this.namePos = namePos;
	this.value = value;
};
hxjsonast.JObjectField.__name__ = true;
hxjsonast.JObjectField.prototype = {
	__class__: hxjsonast.JObjectField
};
hxjsonast.Parser = function(source,filename) {
	this.source = source;
	this.filename = filename;
	this.pos = 0;
};
hxjsonast.Parser.__name__ = true;
hxjsonast.Parser.prototype = {
	parseRec: function() {
		while(true) {
			var c = this.source.charCodeAt(this.pos++);
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			case 34:
				var save = this.pos;
				var s = this.parseString();
				return new hxjsonast.Json(hxjsonast.JsonValue.JString(s),new hxjsonast.Position(this.filename,save - 1,this.pos));
			case 45:case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
				var start = this.pos - 1;
				var minus = c == 45;
				var digit = !minus;
				var zero = c == 48;
				var point = false;
				var e = false;
				var pm = false;
				var end = false;
				while(true) {
					var _g = this.source.charCodeAt(this.pos++);
					switch(_g) {
					case 43:case 45:
						if(!e || pm) {
							this.invalidNumber(start);
						}
						digit = false;
						pm = true;
						break;
					case 46:
						if(minus || point) {
							this.invalidNumber(start);
						}
						digit = false;
						point = true;
						break;
					case 48:
						if(zero && !point) {
							this.invalidNumber(start);
						}
						if(minus) {
							minus = false;
							zero = true;
						}
						digit = true;
						break;
					case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
						if(zero && !point) {
							this.invalidNumber(start);
						}
						if(minus) {
							minus = false;
						}
						digit = true;
						zero = false;
						break;
					case 69:case 101:
						if(minus || zero || e) {
							this.invalidNumber(start);
						}
						digit = false;
						e = true;
						break;
					default:
						if(!digit) {
							this.invalidNumber(start);
						}
						this.pos--;
						end = true;
					}
					if(end) {
						break;
					}
				}
				var s1 = HxOverrides.substr(this.source,start,this.pos - start);
				return new hxjsonast.Json(hxjsonast.JsonValue.JNumber(s1),new hxjsonast.Position(this.filename,start,this.pos));
			case 91:
				var values = [];
				var comma = null;
				var startPos = this.pos - 1;
				while(true) {
					var _g1 = this.source.charCodeAt(this.pos++);
					switch(_g1) {
					case 9:case 10:case 13:case 32:
						break;
					case 44:
						if(comma) {
							comma = false;
						} else {
							this.invalidChar();
						}
						break;
					case 93:
						if(comma == false) {
							this.invalidChar();
						}
						return new hxjsonast.Json(hxjsonast.JsonValue.JArray(values),new hxjsonast.Position(this.filename,startPos,this.pos));
					default:
						if(comma) {
							this.invalidChar();
						}
						this.pos--;
						values.push(this.parseRec());
						comma = true;
					}
				}
				break;
			case 102:
				var save1 = this.pos;
				if(this.source.charCodeAt(this.pos++) != 97 || this.source.charCodeAt(this.pos++) != 108 || this.source.charCodeAt(this.pos++) != 115 || this.source.charCodeAt(this.pos++) != 101) {
					this.pos = save1;
					this.invalidChar();
				}
				return new hxjsonast.Json(hxjsonast.JsonValue.JBool(false),new hxjsonast.Position(this.filename,save1 - 1,this.pos));
			case 110:
				var save2 = this.pos;
				if(this.source.charCodeAt(this.pos++) != 117 || this.source.charCodeAt(this.pos++) != 108 || this.source.charCodeAt(this.pos++) != 108) {
					this.pos = save2;
					this.invalidChar();
				}
				return new hxjsonast.Json(hxjsonast.JsonValue.JNull,new hxjsonast.Position(this.filename,save2 - 1,this.pos));
			case 116:
				var save3 = this.pos;
				if(this.source.charCodeAt(this.pos++) != 114 || this.source.charCodeAt(this.pos++) != 117 || this.source.charCodeAt(this.pos++) != 101) {
					this.pos = save3;
					this.invalidChar();
				}
				return new hxjsonast.Json(hxjsonast.JsonValue.JBool(true),new hxjsonast.Position(this.filename,save3 - 1,this.pos));
			case 123:
				var fields = [];
				var names = new haxe.ds.StringMap();
				var field = null;
				var fieldPos = null;
				var comma1 = null;
				var startPos1 = this.pos - 1;
				while(true) {
					var _g2 = this.source.charCodeAt(this.pos++);
					switch(_g2) {
					case 9:case 10:case 13:case 32:
						break;
					case 34:
						if(comma1) {
							this.invalidChar();
						}
						var fieldStartPos = this.pos - 1;
						field = this.parseString();
						fieldPos = new hxjsonast.Position(this.filename,fieldStartPos,this.pos);
						if(__map_reserved[field] != null ? names.existsReserved(field) : names.h.hasOwnProperty(field)) {
							throw new js._Boot.HaxeError(new hxjsonast.Error("Duplicate field name \"" + field + "\"",fieldPos));
						} else if(__map_reserved[field] != null) {
							names.setReserved(field,true);
						} else {
							names.h[field] = true;
						}
						break;
					case 44:
						if(comma1) {
							comma1 = false;
						} else {
							this.invalidChar();
						}
						break;
					case 58:
						if(field == null) {
							this.invalidChar();
						}
						fields.push(new hxjsonast.JObjectField(field,fieldPos,this.parseRec()));
						field = null;
						fieldPos = null;
						comma1 = true;
						break;
					case 125:
						if(field != null || comma1 == false) {
							this.invalidChar();
						}
						return new hxjsonast.Json(hxjsonast.JsonValue.JObject(fields),new hxjsonast.Position(this.filename,startPos1,this.pos));
					default:
						this.invalidChar();
					}
				}
				break;
			default:
				this.invalidChar();
			}
		}
	}
	,parseString: function() {
		var start = this.pos;
		var buf = null;
		while(true) {
			var c = this.source.charCodeAt(this.pos++);
			if(c == 34) {
				break;
			}
			if(c == 92) {
				if(buf == null) {
					buf = new StringBuf();
				}
				var s = this.source;
				var len = this.pos - start - 1;
				buf.b += len == null ? HxOverrides.substr(s,start,null) : HxOverrides.substr(s,start,len);
				c = this.source.charCodeAt(this.pos++);
				switch(c) {
				case 34:case 47:case 92:
					buf.b += String.fromCharCode(c);
					break;
				case 98:
					buf.b += "\x08";
					break;
				case 102:
					buf.b += "\x0C";
					break;
				case 110:
					buf.b += "\n";
					break;
				case 114:
					buf.b += "\r";
					break;
				case 116:
					buf.b += "\t";
					break;
				case 117:
					var uc = Std.parseInt("0x" + HxOverrides.substr(this.source,this.pos,4));
					this.pos += 4;
					buf.b += String.fromCharCode(uc);
					break;
				default:
					throw new js._Boot.HaxeError(new hxjsonast.Error("Invalid escape sequence \\" + String.fromCharCode(c),new hxjsonast.Position(this.filename,this.pos - 2,this.pos)));
				}
				start = this.pos;
			} else if(c != c) {
				this.pos--;
				throw new js._Boot.HaxeError(new hxjsonast.Error("Unclosed string",new hxjsonast.Position(this.filename,start - 1,this.pos)));
			}
		}
		if(buf == null) {
			return HxOverrides.substr(this.source,start,this.pos - start - 1);
		} else {
			var s1 = this.source;
			var len1 = this.pos - start - 1;
			buf.b += len1 == null ? HxOverrides.substr(s1,start,null) : HxOverrides.substr(s1,start,len1);
			return buf.b;
		}
	}
	,invalidChar: function() {
		this.pos--;
		throw new js._Boot.HaxeError(new hxjsonast.Error("Invalid character: " + this.source.charAt(this.pos),new hxjsonast.Position(this.filename,this.pos,this.pos + 1)));
	}
	,invalidNumber: function(start) {
		throw new js._Boot.HaxeError(new hxjsonast.Error("Invalid number: " + this.source.substring(start,this.pos),new hxjsonast.Position(this.filename,start,this.pos)));
	}
	,__class__: hxjsonast.Parser
};
hxjsonast.Position = function(file,min,max) {
	this.file = file;
	this.min = min;
	this.max = max;
};
hxjsonast.Position.__name__ = true;
hxjsonast.Position.prototype = {
	__class__: hxjsonast.Position
};
var js = {};
js._Boot = {};
js._Boot.HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js._Boot.HaxeError);
	}
};
js._Boot.HaxeError.__name__ = true;
js._Boot.HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js._Boot.HaxeError(val);
	}
};
js._Boot.HaxeError.__super__ = Error;
js._Boot.HaxeError.prototype = $extend(Error.prototype,{
	__class__: js._Boot.HaxeError
});
js.Boot = function() { };
js.Boot.__name__ = true;
js.Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js.Boot.__nativeClassName(o);
		if(name != null) {
			return js.Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js.Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js.Boot.__string_rec(o[i],s);
					} else {
						str += js.Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js.Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js.Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js.Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js.Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js.Boot.__interfLoop(cc.__super__,cl);
};
js.Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js.Boot.__interfLoop(js.Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js.Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js.Boot.__nativeClassName = function(o) {
	var name = js.Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js.Boot.__isNativeObj = function(o) {
	return js.Boot.__nativeClassName(o) != null;
};
js.Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
js.node = {};
js.node.ChildProcess = require("child_process");
js.node.Fs = require("fs");
js.node.Http = require("http");
js.node.Https = require("https");
js.node.Url = require("url");
js.node.buffer = {};
js.node.buffer.Buffer = require("buffer").Buffer;
var json2object = {};
json2object.Error = { __ename__ : true, __constructs__ : ["IncorrectType","UninitializedVariable","UnknownVariable","ParserError"] };
json2object.Error.IncorrectType = function(variable,expected,pos) { var $x = ["IncorrectType",0,variable,expected,pos]; $x.__enum__ = json2object.Error; $x.toString = $estr; return $x; };
json2object.Error.UninitializedVariable = function(variable,pos) { var $x = ["UninitializedVariable",1,variable,pos]; $x.__enum__ = json2object.Error; $x.toString = $estr; return $x; };
json2object.Error.UnknownVariable = function(variable,pos) { var $x = ["UnknownVariable",2,variable,pos]; $x.__enum__ = json2object.Error; $x.toString = $estr; return $x; };
json2object.Error.ParserError = function(message,pos) { var $x = ["ParserError",3,message,pos]; $x.__enum__ = json2object.Error; $x.toString = $estr; return $x; };
json2object.ErrorUtils = function() { };
json2object.ErrorUtils.__name__ = true;
json2object.ErrorUtils.convertError = function(e) {
	var pos;
	switch(e[1]) {
	case 0:
		var pos1 = e[4];
		pos = pos1;
		break;
	case 1:
		var pos2 = e[3];
		pos = pos2;
		break;
	case 2:
		var pos3 = e[3];
		pos = pos3;
		break;
	case 3:
		var pos4 = e[3];
		pos = pos4;
		break;
	}
	var res = pos != null ? "" + pos.file + ":" + pos.line.number + ": characters " + pos.line.start + "-" + pos.line.end + " : " : "";
	switch(e[1]) {
	case 0:
		var expected = e[3];
		var variable = e[2];
		res += "variable " + variable + " should have been of type " + expected;
		break;
	case 1:
		var variable1 = e[2];
		res += "variable " + variable1 + " isn't in the json";
		break;
	case 2:
		var variable2 = e[2];
		res += "variable " + variable2 + " isn't in the schema";
		break;
	case 3:
		var message = e[2];
		res += "parser eror: " + message;
		break;
	}
	return res;
};
json2object.ErrorUtils.convertErrorArray = function(e) {
	return e.map(json2object.ErrorUtils.convertError).join("\n");
};
json2object.PosUtils = function(content) {
	this.linesInfo = [];
	var s = 0;
	var e = 0;
	var i = 0;
	var lineCount = 0;
	while(i < content.length) {
		var _g = content.charAt(i);
		switch(_g) {
		case "\n":
			e = i;
			this.linesInfo.push({ number : lineCount, start : s, end : e});
			++lineCount;
			s = ++i;
			break;
		case "\r":
			e = i;
			if(content.charAt(i + 1) == "\n") {
				++e;
			}
			this.linesInfo.push({ number : lineCount, start : s, end : e});
			++lineCount;
			i = e + 1;
			s = i;
			break;
		default:
			++i;
		}
		this.linesInfo.push({ number : lineCount, start : s, end : i});
	}
};
json2object.PosUtils.__name__ = true;
json2object.PosUtils.prototype = {
	convertPosition: function(position) {
		var file = position.file;
		var min = position.min;
		var max = position.max;
		var _g = 0;
		var _g1 = this.linesInfo;
		while(_g < _g1.length) {
			var line = _g1[_g];
			++_g;
			if(line.start <= min && line.end >= max) {
				return { file : file, line : { number : line.number, start : min - line.start, end : max - line.start}, min : min, max : max};
			}
		}
		return null;
	}
	,__class__: json2object.PosUtils
};
var jstack = {};
jstack.js = {};
jstack.js.JStack = function() {
	this.ready = false;
	if(jstack.js.JStack.isNode()) {
		process.on("uncaughtException", jstack.js.JStack._uncaughtExceptionHandler);
	}
	this.inject();
};
jstack.js.JStack.__name__ = true;
jstack.js.JStack.onReady = function(callback) {
	jstack.js.JStack.onReadyCallback = callback;
	if(jstack.js.JStack.instance.ready) {
		callback();
	}
};
jstack.js.JStack.uncaughtExceptionHandler = function(e) {
	var stack = haxe.CallStack.getStack(e).map(jstack.js.JStack.improveStackItem);
	var error = e.message + haxe.CallStack.toString(stack) + "\n";
	return error;
};
jstack.js.JStack._uncaughtExceptionHandler = function(e) {
	var error = jstack.js.JStack.uncaughtExceptionHandler(e);
	if(error != null && error.length > 0) {
		console.log(error);
	}
};
jstack.js.JStack.isNode = function() {
	return typeof window == 'undefined';
};
jstack.js.JStack.improveStackItem = function(item) {
	if(item[1] == 1) {
		var line = item[2];
		if(jstack.js.JStack.stackFile.match(line)) {
			var file = jstack.js.JStack.stackFile.matched(1);
			if(file != jstack.js.JStack.currentFile()) {
				return item;
			}
			var line1 = Std.parseInt(jstack.js.JStack.stackFile.matched(2));
			var column = Std.parseInt(jstack.js.JStack.stackFile.matched(3));
			var pos = jstack.js.JStack.mapper.originalPositionFor(line1,column);
			return haxe.StackItem.FilePos(null,pos.source,pos.originalLine);
		} else {
			var line2 = item[2];
			if(jstack.js.JStack.stackFunctionFile.match(line2)) {
				var file1 = jstack.js.JStack.stackFunctionFile.matched(2);
				if(file1 != jstack.js.JStack.currentFile()) {
					return item;
				}
				var line3 = Std.parseInt(jstack.js.JStack.stackFunctionFile.matched(3));
				var column1 = Std.parseInt(jstack.js.JStack.stackFunctionFile.matched(4));
				var pos1 = jstack.js.JStack.mapper.originalPositionFor(line3,column1);
				if(pos1 == null) {
					return item;
				}
				var fn = jstack.js.JStack.stackFunctionFile.matched(1).split(".");
				var method = fn.pop();
				var cls = fn.join(".");
				var methodItem = cls != null && method != null ? haxe.StackItem.Method(cls,method) : null;
				return haxe.StackItem.FilePos(methodItem,pos1.source,pos1.originalLine);
			} else {
				return item;
			}
		}
	} else {
		return item;
	}
};
jstack.js.JStack.currentFile = function() {
	if(jstack.js.JStack.isNode()) {
		return __filename;
	}
	return null;
};
jstack.js.JStack.prototype = {
	inject: function() {
		var _gthis = this;
		this.loadSourceMap(function(sourceMapData) {
			jstack.js.JStack.mapper = new SourceMap(sourceMapData);
			haxe.CallStack.wrapCallSite = function(site) {
				var pos = jstack.js.JStack.mapper.originalPositionFor(site.getLineNumber(),site.getColumnNumber());
				return new jstack.js.StackPos(site,pos);
			};
			_gthis.ready = true;
			if(jstack.js.JStack.onReadyCallback != null) {
				jstack.js.JStack.onReadyCallback();
			}
		});
	}
	,loadSourceMap: function(callback) {
		if(!jstack.js.JStack.isNode()) {
			this.loadInBrowser(callback);
		} else {
			this.loadInNode(callback);
		}
	}
	,loadInBrowser: function(callback) {
		var file = this.getCurrentDirInBrowser() + "/" + ("run.js" + ".map");
		var http = new haxe.Http(file);
		http.onError = function(error) {
			console.log(error);
		};
		http.onData = function(sourceMap) {
			callback(sourceMap);
		};
		http.request();
	}
	,loadInNode: function(callback) {
		var dir = __dirname;
		var fs = require('fs');
		fs.readFile(dir + "/" + ("run.js" + ".map"),function(error,sourceMap) {
			if(error != null) {
				console.log(error);
			} else {
				callback(sourceMap);
			}
		});
	}
	,getCurrentDirInBrowser: function() {
		var file = "run.js";
		var scripts = window.document.getElementsByTagName("script");
		var fullPath = "./" + file;
		var _g1 = 0;
		var _g = scripts.length;
		while(_g1 < _g) {
			var i = _g1++;
			var src = scripts.item(i).attributes.getNamedItem("src");
			if(src != null && src.value.indexOf(file) >= 0) {
				fullPath = src.value;
			}
		}
		var path = new haxe.io.Path(fullPath);
		return path.dir;
	}
	,__class__: jstack.js.JStack
};
jstack.js.StackPos = function(js,hx) {
	this.js = js;
	this.hx = hx;
};
jstack.js.StackPos.__name__ = true;
jstack.js.StackPos.prototype = {
	getFunctionName: function() {
		return this.js.getFunctionName();
	}
	,getFileName: function() {
		if(this.hx == null || this.hx.originalLine == null) {
			return this.js.getFileName();
		} else {
			return this.hx.source;
		}
	}
	,getLineNumber: function() {
		if(this.hx == null || this.hx.originalLine == null) {
			return this.js.getLineNumber();
		} else {
			return this.hx.originalLine;
		}
	}
	,__class__: jstack.js.StackPos
};
var vshaxeBuild = {};
vshaxeBuild.ArrayTools = function() { };
vshaxeBuild.ArrayTools.__name__ = true;
vshaxeBuild.ArrayTools.filterDuplicates = function(tasks,filter) {
	var uniqueTasks = [];
	var _g = 0;
	while(_g < tasks.length) {
		var task = tasks[_g];
		++_g;
		var present = false;
		var _g1 = 0;
		while(_g1 < uniqueTasks.length) {
			var unique = uniqueTasks[_g1];
			++_g1;
			if(filter(unique,task)) {
				present = true;
			}
		}
		if(!present) {
			uniqueTasks.push(task);
		}
	}
	return uniqueTasks;
};
vshaxeBuild.ArrayTools.findNamed = function(a,name) {
	var e = HxOverrides.iter(a);
	while(e.hasNext()) {
		var e1 = e.next();
		if(e1.name == name) {
			return e1;
		}
	}
	return null;
};
vshaxeBuild.ArrayTools.idx = function(a,i) {
	if(i >= 0) {
		return a[i];
	} else {
		return a[a.length + i];
	}
};
vshaxeBuild.ArrayTools.flatten = function(array) {
	return vshaxeBuild.ArrayTools.reduce(array,function(acc,element) {
		return acc.concat(element);
	},[]);
};
vshaxeBuild.ArrayTools.reduce = function(array,f,initial) {
	var _g = 0;
	while(_g < array.length) {
		var v = array[_g];
		++_g;
		initial = f(initial,v);
	}
	return initial;
};
vshaxeBuild.CliTools = function(verbose,dryRun) {
	this.verbose = verbose;
	this.dryRun = dryRun;
	if(dryRun) {
		this.verbose = true;
	}
};
vshaxeBuild.CliTools.__name__ = true;
vshaxeBuild.CliTools.prototype = {
	runCommands: function(commands) {
		var _g = 0;
		var _g1 = vshaxeBuild._Project.ArrayHandle_Impl_.get(commands);
		while(_g < _g1.length) {
			var command = _g1[_g];
			++_g;
			this.runCommand(command);
		}
	}
	,runCommand: function(cmd) {
		var command = vshaxeBuild._Project.ArrayHandle_Impl_.get(cmd);
		if(command.length == 0) {
			return;
		}
		var executable = command[0];
		command.shift();
		this.run(executable,command);
	}
	,inDir: function(dir,f) {
		var oldCwd = process.cwd();
		this.setCwd(dir);
		f();
		this.setCwd(oldCwd);
	}
	,setCwd: function(dir) {
		if(dir == null || StringTools.trim(dir) == "") {
			return;
		}
		this.println("cd " + dir);
		process.chdir(dir);
	}
	,run: function(command,args) {
		this.println(command + " " + args.join(" "));
		if(!this.dryRun) {
			var result = args == null ? js.node.ChildProcess.spawnSync(command,{ stdio : "inherit"}).status : js.node.ChildProcess.spawnSync(command,args,{ stdio : "inherit"}).status;
			if(result != 0) {
				process.exit(result);
			}
		}
	}
	,println: function(message) {
		if(this.verbose) {
			process.stdout.write(message == null ? "null" : "" + message);
			process.stdout.write("\n");
		}
	}
	,exit: function(message,code) {
		if(code == null) {
			code = 0;
		}
		process.stdout.write("VSHaxe Build Tool");
		process.stdout.write("\n");
		process.stdout.write(message == null ? "null" : "" + message);
		process.stdout.write("\n");
		process.exit(code);
	}
	,fail: function(message) {
		this.exit(message,1);
	}
	,saveContent: function(path,content) {
		if(this.verbose) {
			this.println("Saving to '" + path + "':\n\n" + content);
		}
		if(!this.dryRun) {
			js.node.Fs.writeFileSync(path,content);
		}
	}
	,__class__: vshaxeBuild.CliTools
};
vshaxeBuild.Main = function() {
	var cliArgs = { targets : [], debug : false, mode : vshaxeBuild.Mode.Build};
	var dryRun = false;
	var verbose = false;
	var genTasks = false;
	var display = false;
	var dump = false;
	var help = false;
	var modeStr = "build";
	var args = process.argv.slice(2);
	var cwd = args.pop();
	var argHandler_parse;
	var argHandler_getDoc = function() {
		return "[-t | --target] <name> : One or multiple targets to build.\n[-m | --mode] <mode>   : Build mode - accepted values are 'build', 'install', and 'both'.\n[--debug]              : Build the target(s) in debug mode. Implies -debug, -D js_unflatten and -lib jstack.\n[--dry-run]            : Perform a dry run (no command invocations). Implies -verbose.\n[-v | --verbose]       : Output the commands that are executed.\n[--gen-tasks]          : Generate a tasks.json to .vscode (and don't build anything).\n[--display]            : Generate a complete.hxml for auto completion (and don't build anything).\n[--dump]               : Dump the parsed project files to dump.json.\n[--help]               : Display this help text and exit.";
	};
	argHandler_parse = function(__args) {
		var __index = 0;
		while(__index < __args.length) {
			var _g = __args[__index++];
			switch(_g) {
			case "--debug":
				if(__index > __args.length) {
					if(![][__args.length - 1]) {
						throw new js._Boot.HaxeError("Not enough arguments: " + Std.string(__args[__index - 1]) + " expects " + 0);
					}
				}
				cliArgs.debug = true;
				__index += 0;
				break;
			case "--display":
				if(__index > __args.length) {
					if(![][__args.length - 1]) {
						throw new js._Boot.HaxeError("Not enough arguments: " + Std.string(__args[__index - 1]) + " expects " + 0);
					}
				}
				display = true;
				__index += 0;
				break;
			case "--dry-run":
				if(__index > __args.length) {
					if(![][__args.length - 1]) {
						throw new js._Boot.HaxeError("Not enough arguments: " + Std.string(__args[__index - 1]) + " expects " + 0);
					}
				}
				dryRun = true;
				__index += 0;
				break;
			case "--dump":
				if(__index > __args.length) {
					if(![][__args.length - 1]) {
						throw new js._Boot.HaxeError("Not enough arguments: " + Std.string(__args[__index - 1]) + " expects " + 0);
					}
				}
				dump = true;
				__index += 0;
				break;
			case "--gen-tasks":
				if(__index > __args.length) {
					if(![][__args.length - 1]) {
						throw new js._Boot.HaxeError("Not enough arguments: " + Std.string(__args[__index - 1]) + " expects " + 0);
					}
				}
				genTasks = true;
				__index += 0;
				break;
			case "--help":
				if(__index > __args.length) {
					if(![][__args.length - 1]) {
						throw new js._Boot.HaxeError("Not enough arguments: " + Std.string(__args[__index - 1]) + " expects " + 0);
					}
				}
				help = true;
				__index += 0;
				break;
			case "--target":case "-t":
				if(__index + 1 > __args.length) {
					if(![false][__args.length - 1]) {
						throw new js._Boot.HaxeError("Not enough arguments: " + Std.string(__args[__index - 1]) + " expects " + 1);
					}
				}
				cliArgs.targets.push(__args[__index]);
				++__index;
				break;
			case "--mode":case "-m":
				if(__index + 1 > __args.length) {
					if(![false][__args.length - 1]) {
						throw new js._Boot.HaxeError("Not enough arguments: " + Std.string(__args[__index - 1]) + " expects " + 1);
					}
				}
				modeStr = __args[__index];
				++__index;
				break;
			case "--verbose":case "-v":
				if(__index > __args.length) {
					if(![][__args.length - 1]) {
						throw new js._Boot.HaxeError("Not enough arguments: " + Std.string(__args[__index - 1]) + " expects " + 0);
					}
				}
				verbose = true;
				__index += 0;
				break;
			default:
				throw new js._Boot.HaxeError("Unknown command: " + Std.string(_g));
			}
		}
	};
	try {
		argHandler_parse(args);
	} catch( e ) {
		if (e instanceof js._Boot.HaxeError) e = e.val;
		var v = "" + Std.string(e) + "\n\nAvailable commands:\n" + argHandler_getDoc();
		process.stdout.write(Std.string(v));
		process.stdout.write("\n");
		process.exit(1);
	}
	this.cli = new vshaxeBuild.CliTools(verbose,dryRun);
	if(args.length == 0 || help) {
		this.cli.exit(argHandler_getDoc());
	}
	var defaults = this.toPlacedProject(".",this.readProjectFile("defaults.json"));
	process.chdir(cwd);
	var projects = [defaults,this.findProjectFiles()];
	if(dump) {
		js.node.Fs.writeFileSync("dump.json",JSON.stringify(projects,null,"    "));
	}
	this.validateTargets(cliArgs.targets);
	var tmp = vshaxeBuild.Mode.__constructs__.slice();
	this.validateEnum("mode",modeStr,tmp);
	var tmp1 = Type.createEnum(vshaxeBuild.Mode,this.getEnumName(modeStr),null);
	cliArgs.mode = tmp1;
	if(genTasks && display) {
		this.cli.fail("Can only specify one: --gen-tasks or --display");
	}
	if(genTasks) {
		new vshaxeBuild.builders.VSCodeTasksBuilder(this.cli,projects).build(cliArgs);
	} else if(display) {
		new vshaxeBuild.builders.DisplayHxmlBuilder(this.cli,projects).build(cliArgs);
	} else {
		new vshaxeBuild.builders.HaxeBuilder(this.cli,projects).build(cliArgs);
	}
};
vshaxeBuild.Main.__name__ = true;
vshaxeBuild.Main.main = function() {
	jstack.js.JStack.onReady(function() {
		try {
			new vshaxeBuild.Main();
		} catch( e ) {
			if (e instanceof js._Boot.HaxeError) e = e.val;
			process.stdout.write(Std.string(e));
			process.stdout.write("\n");
			process.exit(1);
		}
	});
};
vshaxeBuild.Main.prototype = {
	validateTargets: function(targets) {
		var targetList = "List of valid targets:\n  " + Std.string(targets);
		if(targets.length == 0) {
			this.cli.fail("No target(s) specified! " + targetList);
		}
		var _g = 0;
		while(_g < targets.length) {
			var target = targets[_g];
			++_g;
			this.validateEnum("target",target,targets);
		}
	}
	,validateEnum: function(name,value,validValues) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < validValues.length) {
			var value1 = validValues[_g1];
			++_g1;
			_g.push(Std.string(value1).toLowerCase());
		}
		if(_g.indexOf(Std.string(value)) == -1) {
			this.cli.fail("Unknown " + name + " '" + Std.string(value) + "'. Valid values are: " + Std.string(_g));
		}
	}
	,getEnumName: function(cliName) {
		return HxOverrides.substr(cliName,0,1).toUpperCase() + HxOverrides.substr(cliName,1,null);
	}
	,findProjectFiles: function(dir) {
		if(dir == null) {
			dir = ".";
		}
		var lastDir = vshaxeBuild.ArrayTools.idx(dir.split("/"),-1);
		if(lastDir != "." && lastDir != ".." && StringTools.startsWith(lastDir,".") || ["dump","node_modules"].indexOf(dir) != -1) {
			return null;
		}
		var project = null;
		var subProjects = [];
		var _g = 0;
		var _g1 = js.node.Fs.readdirSync(dir);
		while(_g < _g1.length) {
			var file = _g1[_g];
			++_g;
			var fullPath = haxe.io.Path.join([dir,file]);
			if(js.node.Fs.statSync(fullPath).isDirectory()) {
				var subProject = this.findProjectFiles(fullPath);
				if(subProject != null) {
					subProjects.push(subProject);
				}
			} else if(file == "vshaxe-build.json") {
				project = this.toPlacedProject(lastDir,this.readProjectFile(fullPath));
			}
		}
		if(project != null) {
			project.subProjects = subProjects;
		}
		return project;
	}
	,readProjectFile: function(path) {
		var parser = new JsonParser_Ano_haxelibs___Abstract_ArrayHandle___Ano_installArgs_____Abstract_ArrayHandle_____Inst_Stringname_____Inst_Stringinherit_mainTarget_targets___Abstract_ArrayHandle___Ano_afterBuildCommands_args_beforeBuildCommands_composite_debug_display_inherit_installCommands_isBuildCommand_isTestCommand_name_____Inst_StringtargetDependencies_();
		var json = parser.fromJson(js.node.Fs.readFileSync(path,{ encoding : "utf8"}),path);
		if(parser.warnings.length > 0) {
			this.cli.fail(json2object.ErrorUtils.convertErrorArray(parser.warnings));
		}
		return json;
	}
	,toPlacedProject: function(directory,project) {
		return { inherit : project.inherit, mainTarget : project.mainTarget, haxelibs : project.haxelibs, targets : project.targets, directory : directory, subProjects : []};
	}
	,__class__: vshaxeBuild.Main
};
vshaxeBuild.Mode = { __ename__ : true, __constructs__ : ["Build","Install","Both"] };
vshaxeBuild.Mode.Build = ["Build",0];
vshaxeBuild.Mode.Build.toString = $estr;
vshaxeBuild.Mode.Build.__enum__ = vshaxeBuild.Mode;
vshaxeBuild.Mode.Install = ["Install",1];
vshaxeBuild.Mode.Install.toString = $estr;
vshaxeBuild.Mode.Install.__enum__ = vshaxeBuild.Mode;
vshaxeBuild.Mode.Both = ["Both",2];
vshaxeBuild.Mode.Both.toString = $estr;
vshaxeBuild.Mode.Both.__enum__ = vshaxeBuild.Mode;
vshaxeBuild._Project = {};
vshaxeBuild._Project.ArrayHandle_Impl_ = {};
vshaxeBuild._Project.ArrayHandle_Impl_.__name__ = true;
vshaxeBuild._Project.ArrayHandle_Impl_.get = function(this1) {
	if(this1 == null) {
		return [];
	} else {
		return this1.slice();
	}
};
vshaxeBuild.builders = {};
vshaxeBuild.builders.IBuilder = function() { };
vshaxeBuild.builders.IBuilder.__name__ = true;
vshaxeBuild.builders.BaseBuilder = function(cli,projects) {
	this.cli = cli;
	this.projects = projects;
	var _g = 0;
	while(_g < projects.length) {
		var project = projects[_g];
		++_g;
		this.adjustWorkingDirectories(project,project.directory);
	}
};
vshaxeBuild.builders.BaseBuilder.__name__ = true;
vshaxeBuild.builders.BaseBuilder.__interfaces__ = [vshaxeBuild.builders.IBuilder];
vshaxeBuild.builders.BaseBuilder.prototype = {
	adjustWorkingDirectories: function(project,baseDir) {
		var target = HxOverrides.iter(project.targets);
		while(target.hasNext()) {
			var target1 = target.next();
			var projectBaseDir = haxe.io.Path.join([baseDir,project.directory]);
			var hxml = target1.args;
			if(hxml != null) {
				hxml.workingDirectory = projectBaseDir;
			}
			if(target1.debug != null) {
				var hxml1 = target1.debug.args;
				if(hxml1 != null) {
					hxml1.workingDirectory = projectBaseDir;
				}
			}
			if(target1.display != null) {
				var hxml2 = target1.display.args;
				if(hxml2 != null) {
					hxml2.workingDirectory = projectBaseDir;
				}
			}
			vshaxeBuild._Project.ArrayHandle_Impl_.get(project.subProjects).map((function(a2,f) {
				return function(a1) {
					f[0](a1,a2[0]);
					return;
				};
			})([projectBaseDir],[$bind(this,this.adjustWorkingDirectories)]));
		}
	}
	,resolveHaxelib: function(name) {
		var loop = null;
		loop = function(projects) {
			var project = HxOverrides.iter(projects);
			while(project.hasNext()) {
				var project1 = project.next();
				var lib = vshaxeBuild.ArrayTools.findNamed(project1.haxelibs,name);
				if(lib != null) {
					return lib;
				}
				var libInSub = loop(project1.subProjects);
				if(libInSub != null) {
					return libInSub;
				}
			}
			return null;
		};
		var loop1 = loop;
		return loop1(this.projects);
	}
	,resolveTarget: function(name) {
		var loop = null;
		loop = function(projects) {
			var project = HxOverrides.iter(projects);
			while(project.hasNext()) {
				var project1 = project.next();
				var target = vshaxeBuild.ArrayTools.findNamed(project1.targets,name);
				if(target != null) {
					return target;
				}
				var targetInSub = loop(project1.subProjects);
				if(targetInSub != null) {
					return targetInSub;
				}
			}
			return null;
		};
		var loop1 = loop;
		return loop1(this.projects);
	}
	,resolveTargets: function(names) {
		return names.map($bind(this,this.resolveTarget));
	}
	,resolveTargetHxml: function(target,debug,flatten,display,recurse) {
		if(recurse == null) {
			recurse = true;
		}
		var hxmls = [target.args];
		if(debug && target.debug != null) {
			hxmls.push(target.debug.args);
		}
		if(display && target.display != null) {
			hxmls.push(target.display.args);
		}
		if(recurse) {
			var _g = this.resolveParent(target);
			switch(_g[1]) {
			case 0:
				var parent = _g[2];
				if(parent != null) {
					var inheritedHxml = this.resolveTargetHxml(parent,debug,flatten,display,false);
					if(inheritedHxml != null) {
						hxmls.push(inheritedHxml);
					}
				}
				break;
			case 1:
				break;
			}
		}
		if(flatten) {
			var f = $bind(this,this.resolveTargetHxml);
			var a2 = debug;
			var a3 = flatten;
			var a4 = display;
			var dependencyHxmls = function(a1) {
				return f(a1,a2,a3,a4);
			};
			var dependencyHxmls1 = this.resolveTargets(vshaxeBuild._Project.ArrayHandle_Impl_.get(target.targetDependencies)).map(dependencyHxmls);
			hxmls = hxmls.concat(dependencyHxmls1);
		}
		return this.mergeHxmls(hxmls,flatten,debug);
	}
	,resolveParent: function(target) {
		if(target.inherit != null) {
			return haxe.ds.Option.Some(this.resolveTarget(target.inherit));
		}
		var _g = this.getTargetOwner(target);
		switch(_g[1]) {
		case 0:
			var project = _g[2];
			return haxe.ds.Option.Some(this.resolveTarget(project.inherit));
		case 1:
			throw new js._Boot.HaxeError("unable to find owner of target " + target.name);
			break;
		}
	}
	,flattenProjects: function(project) {
		var projects = [project];
		projects = projects.concat(vshaxeBuild.ArrayTools.flatten(vshaxeBuild._Project.ArrayHandle_Impl_.get(project.subProjects).map($bind(this,this.flattenProjects))));
		return projects;
	}
	,getTargetOwner: function(target) {
		var _g = 0;
		var _g1 = this.projects;
		while(_g < _g1.length) {
			var project = _g1[_g];
			++_g;
			var flattened = this.flattenProjects(project);
			var _g2 = 0;
			while(_g2 < flattened.length) {
				var flattenedProject = flattened[_g2];
				++_g2;
				if(vshaxeBuild.ArrayTools.findNamed(flattenedProject.targets,target.name) != null) {
					return haxe.ds.Option.Some(project);
				}
			}
		}
		return haxe.ds.Option.None;
	}
	,mergeHxmls: function(hxmls,flatten,debug) {
		var classPaths = [];
		var defines = [];
		var haxelibs = [];
		var macros = [];
		var debug1 = debug;
		var output = null;
		var deadCodeElimination = null;
		var noInline = false;
		var main = null;
		var packageName = null;
		var merge = function(hxml) {
			if(hxml == null) {
				return;
			}
			var rawClassPaths = vshaxeBuild._Project.ArrayHandle_Impl_.get(hxml.classPaths);
			if(flatten) {
				rawClassPaths = rawClassPaths.map(function(cp) {
					return haxe.io.Path.join([hxml.workingDirectory,cp]);
				});
			}
			classPaths = classPaths.concat(rawClassPaths);
			var defines1 = vshaxeBuild._Project.ArrayHandle_Impl_.get(hxml.defines);
			defines = defines.concat(defines1);
			var haxelibs1 = vshaxeBuild._Project.ArrayHandle_Impl_.get(hxml.haxelibs);
			haxelibs = haxelibs.concat(haxelibs1);
			var macros1 = vshaxeBuild._Project.ArrayHandle_Impl_.get(hxml.macros);
			macros = macros.concat(macros1);
			if(!debug1) {
				debug1 = hxml.debug;
			} else {
				debug1 = true;
			}
			if(hxml.output != null) {
				output = hxml.output;
			}
			if(hxml.deadCodeElimination != null) {
				deadCodeElimination = hxml.deadCodeElimination;
			}
			if(hxml.noInline == true) {
				noInline = true;
			}
			if(hxml.main != null) {
				main = hxml.main;
			}
			if(hxml.packageName != null) {
				packageName = hxml.packageName;
			}
		};
		var _g = 0;
		while(_g < hxmls.length) {
			var hxml1 = hxmls[_g];
			++_g;
			merge(hxml1);
		}
		return { workingDirectory : "", classPaths : classPaths, defines : defines, haxelibs : haxelibs, macros : macros, debug : debug1, output : output, deadCodeElimination : deadCodeElimination, noInline : noInline, main : main, packageName : packageName};
	}
	,__class__: vshaxeBuild.builders.BaseBuilder
};
vshaxeBuild.builders.DisplayHxmlBuilder = function(cli,projects) {
	vshaxeBuild.builders.BaseBuilder.call(this,cli,projects);
};
vshaxeBuild.builders.DisplayHxmlBuilder.__name__ = true;
vshaxeBuild.builders.DisplayHxmlBuilder.__super__ = vshaxeBuild.builders.BaseBuilder;
vshaxeBuild.builders.DisplayHxmlBuilder.prototype = $extend(vshaxeBuild.builders.BaseBuilder.prototype,{
	build: function(cliArgs) {
		var f = $bind(this,this.resolveTargetHxml);
		var hxmls = function(a1) {
			return f(a1,true,true,true);
		};
		var hxmls1 = this.resolveTargets(cliArgs.targets).map(hxmls);
		var hxml = this.mergeHxmls(hxmls1,true,true);
		var lines = this.printHxmlFile(hxml);
		lines.splice(0,0,"# " + "This file is generated with vshaxe-build - DO NOT EDIT MANUALLY!");
		lines = vshaxeBuild.ArrayTools.filterDuplicates(lines,function(s1,s2) {
			return s1 == s2;
		});
		this.cli.saveContent("complete.hxml",lines.join("\n"));
	}
	,printHxmlFile: function(hxml) {
		if(hxml == null) {
			return [];
		}
		var lines = [];
		var _g = 0;
		var _g1 = vshaxeBuild._Project.ArrayHandle_Impl_.get(hxml.classPaths);
		while(_g < _g1.length) {
			var cp = _g1[_g];
			++_g;
			lines.push("-cp " + cp);
		}
		var _g2 = 0;
		var _g11 = vshaxeBuild._Project.ArrayHandle_Impl_.get(hxml.defines);
		while(_g2 < _g11.length) {
			var define = _g11[_g2];
			++_g2;
			lines.push("-D " + define);
		}
		var _g3 = 0;
		var _g12 = vshaxeBuild._Project.ArrayHandle_Impl_.get(hxml.haxelibs);
		while(_g3 < _g12.length) {
			var lib = _g12[_g3];
			++_g3;
			lines.push("-lib " + this.resolveHaxelib(lib).name);
		}
		if(hxml.debug) {
			lines.push("-debug");
		}
		if(hxml.output != null) {
			lines.push("-" + hxml.output.target + " " + hxml.output.path);
		}
		if(hxml.noInline == true) {
			lines.push("--no-inline");
		}
		return lines;
	}
	,__class__: vshaxeBuild.builders.DisplayHxmlBuilder
});
vshaxeBuild.builders.HaxeBuilder = function(cli,projects) {
	vshaxeBuild.builders.BaseBuilder.call(this,cli,projects);
};
vshaxeBuild.builders.HaxeBuilder.__name__ = true;
vshaxeBuild.builders.HaxeBuilder.__super__ = vshaxeBuild.builders.BaseBuilder;
vshaxeBuild.builders.HaxeBuilder.prototype = $extend(vshaxeBuild.builders.BaseBuilder.prototype,{
	build: function(cliArgs) {
		var _g = 0;
		var _g1 = cliArgs.targets;
		while(_g < _g1.length) {
			var name = _g1[_g];
			++_g;
			this.buildTarget(this.resolveTarget(name),cliArgs.debug,cliArgs.mode);
		}
	}
	,installTarget: function(target,debug) {
		this.cli.println("Installing Haxelibs for '" + target.name + "'...\n");
		this.cli.runCommands(target.installCommands);
		var libs = vshaxeBuild._Project.ArrayHandle_Impl_.get(this.resolveTargetHxml(target,debug,false,false).haxelibs);
		libs = vshaxeBuild.ArrayTools.filterDuplicates(libs,function(lib1,lib2) {
			return lib1 == lib2;
		});
		var _g = 0;
		while(_g < libs.length) {
			var lib = libs[_g];
			++_g;
			this.cli.run("haxelib",vshaxeBuild._Project.ArrayHandle_Impl_.get(this.resolveHaxelib(lib).installArgs));
		}
		this.cli.println("");
	}
	,buildTarget: function(target,debug,mode) {
		var _gthis = this;
		if(!debug) {
			if(target.args != null) {
				debug = target.args.debug;
			} else {
				debug = false;
			}
		} else {
			debug = true;
		}
		if(mode != vshaxeBuild.Mode.Build) {
			this.installTarget(target,debug);
		}
		var _g = 0;
		var _g1 = vshaxeBuild._Project.ArrayHandle_Impl_.get(target.targetDependencies);
		while(_g < _g1.length) {
			var dependency = _g1[_g];
			++_g;
			this.buildTarget(this.resolveTarget(dependency),debug,mode);
		}
		if(mode == vshaxeBuild.Mode.Install) {
			return;
		}
		this.cli.println("Building '" + target.name + "'...\n");
		var workingDirectory = null;
		if(target.args != null) {
			workingDirectory = target.args.workingDirectory;
		}
		this.cli.inDir(workingDirectory,function() {
			_gthis.cli.runCommands(target.beforeBuildCommands);
			if(!target.composite) {
				var _gthis1 = _gthis.cli;
				var tmp = _gthis.resolveTargetHxml(target,debug,false,false);
				_gthis1.run("haxe",_gthis.printHxml(tmp));
			}
			_gthis.cli.runCommands(target.afterBuildCommands);
		});
		this.cli.println("\n----------------------------------------------\n");
	}
	,printHxml: function(hxml) {
		if(hxml == null) {
			return [];
		}
		var args = [];
		var _g = 0;
		var _g1 = vshaxeBuild._Project.ArrayHandle_Impl_.get(hxml.haxelibs);
		while(_g < _g1.length) {
			var lib = _g1[_g];
			++_g;
			args.push("-lib");
			args.push(this.resolveHaxelib(lib).name);
		}
		var _g2 = 0;
		var _g11 = vshaxeBuild._Project.ArrayHandle_Impl_.get(hxml.classPaths);
		while(_g2 < _g11.length) {
			var cp = _g11[_g2];
			++_g2;
			args.push("-cp");
			args.push(cp);
		}
		var _g3 = 0;
		var _g12 = vshaxeBuild._Project.ArrayHandle_Impl_.get(hxml.defines);
		while(_g3 < _g12.length) {
			var define = _g12[_g3];
			++_g3;
			args.push("-D");
			args.push(define);
		}
		if(hxml.deadCodeElimination != null) {
			args.push("-dce");
			args.push(hxml.deadCodeElimination);
		}
		if(hxml.noInline == true) {
			args.push("--no-inline");
		}
		if(hxml.debug) {
			args.push("-debug");
		}
		var _g4 = 0;
		var _g13 = vshaxeBuild._Project.ArrayHandle_Impl_.get(hxml.macros);
		while(_g4 < _g13.length) {
			var _macro = _g13[_g4];
			++_g4;
			args.push("--macro");
			args.push(_macro);
		}
		if(hxml.output != null) {
			args.push("-" + hxml.output.target);
			args.push(hxml.output.path);
		}
		if(hxml.main != null) {
			args.push("-main");
			args.push(hxml.main);
		}
		if(hxml.packageName != null) {
			args.push(hxml.packageName);
		}
		return args;
	}
	,__class__: vshaxeBuild.builders.HaxeBuilder
});
vshaxeBuild.builders.VSCodeTasksBuilder = function(cli,projects) {
	vshaxeBuild.builders.BaseBuilder.call(this,cli,projects);
};
vshaxeBuild.builders.VSCodeTasksBuilder.__name__ = true;
vshaxeBuild.builders.VSCodeTasksBuilder.__super__ = vshaxeBuild.builders.BaseBuilder;
vshaxeBuild.builders.VSCodeTasksBuilder.prototype = $extend(vshaxeBuild.builders.BaseBuilder.prototype,{
	build: function(cliArgs) {
		var base = Reflect.copy(vshaxeBuild.builders.VSCodeTasksBuilder.template);
		var _g = 0;
		var _g1 = cliArgs.targets;
		while(_g < _g1.length) {
			var name = _g1[_g];
			++_g;
			var target = this.resolveTarget(name);
			base.tasks = this.buildTask(target,false).concat(this.buildTask(target,true));
		}
		base.tasks = vshaxeBuild.ArrayTools.filterDuplicates(base.tasks,function(t1,t2) {
			return t1.taskName == t2.taskName;
		});
		if(this.projects.length > 1 && this.projects[1].mainTarget != null) {
			base.tasks = base.tasks.concat(this.createDefaultTasks(this.projects[1].mainTarget));
		}
		var tasksJson = JSON.stringify(base,null,"    ");
		tasksJson = "// " + "This file is generated with vshaxe-build - DO NOT EDIT MANUALLY!" + "\n" + tasksJson;
		this.cli.saveContent(".vscode/tasks.json",tasksJson);
	}
	,buildTask: function(target,debug) {
		var _gthis = this;
		var suffix = "";
		if((target.args == null || !target.args.debug) && debug) {
			suffix = " (debug)";
		}
		var task = { taskName : "" + target.name + suffix, args : this.makeArgs(["-t",target.name]), problemMatcher : vshaxeBuild.builders.VSCodeTasksBuilder.problemMatcher};
		if(target.args != null && target.args.debug || debug) {
			if(target.isBuildCommand) {
				task.isBuildCommand = true;
				task.taskName += " - BUILD";
			}
			if(target.isTestCommand) {
				task.isTestCommand = true;
				task.taskName += " - TEST";
			}
			task.args.push("--debug");
		}
		return [task].concat(vshaxeBuild.ArrayTools.flatten(vshaxeBuild._Project.ArrayHandle_Impl_.get(target.targetDependencies).map(function(name) {
			var tmp = _gthis.resolveTarget(name);
			return _gthis.buildTask(tmp,debug);
		})));
	}
	,createDefaultTasks: function(target) {
		var _gthis = this;
		return [{ taskName : "{" + "install-all" + "}", args : _gthis.makeArgs(["--target",target].concat(["--mode","install"])), problemMatcher : vshaxeBuild.builders.VSCodeTasksBuilder.problemMatcher},{ taskName : "{" + "generate-complete-hxml" + "}", args : _gthis.makeArgs(["--target",target].concat(["--display"])), problemMatcher : vshaxeBuild.builders.VSCodeTasksBuilder.problemMatcher},{ taskName : "{" + "generate-vscode-tasks" + "}", args : _gthis.makeArgs(["--target",target].concat(["--gen-tasks"])), problemMatcher : vshaxeBuild.builders.VSCodeTasksBuilder.problemMatcher}];
	}
	,makeArgs: function(additionalArgs) {
		return ["run","vshaxe-build"].concat(additionalArgs);
	}
	,__class__: vshaxeBuild.builders.VSCodeTasksBuilder
});
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {}
js.Boot.__toStr = ({ }).toString;
jstack.js.JStack.instance = new jstack.js.JStack();
jstack.js.JStack.stackFile = new EReg("^at (.+?js):([0-9]+):([0-9]+)$","");
jstack.js.JStack.stackFunctionFile = new EReg("^at (.+?) \\((.+?js):([0-9]+):([0-9]+)\\)$","");
vshaxeBuild.builders.VSCodeTasksBuilder.problemMatcher = { owner : "haxe", pattern : { "regexp" : "^(.+):(\\d+): (?:lines \\d+-(\\d+)|character(?:s (\\d+)-| )(\\d+)) : (?:(Warning) : )?(.*)$", "file" : 1, "line" : 2, "endLine" : 3, "column" : 4, "endColumn" : 5, "severity" : 6, "message" : 7}};
vshaxeBuild.builders.VSCodeTasksBuilder.template = { version : "2.0.0", command : "haxelib", suppressTaskName : true, tasks : []};
vshaxeBuild.Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=run.js.map